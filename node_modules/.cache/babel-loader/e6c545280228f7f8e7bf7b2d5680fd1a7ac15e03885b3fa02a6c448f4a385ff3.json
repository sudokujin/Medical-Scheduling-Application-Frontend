{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport AppointmentService from \"../services/AppointmentService\";\nimport Navbar from \"../components/Navbar.vue\";\nimport DoctorTimeService from \"../services/DoctorTimeService\";\nimport PatientService from \"../services/PatientService\";\nexport default {\n  name: \"UpdateAppointmentForm\",\n  components: {\n    Navbar: Navbar\n  },\n  data: function data() {\n    return {\n      appointment: {\n        patientId: 0,\n        doctorId: 0,\n        appointmentId: 0,\n        appointmentDuration: 30,\n        description: \"\",\n        appointmentDate: \"\",\n        appointmentTime: \"\"\n      },\n      appointmentObj: {\n        patientId: 0,\n        doctorId: 0,\n        appointmentId: 0,\n        appointmentDuration: 30,\n        description: \"\",\n        appointmentDate: \"\",\n        appointmentTime: \"\"\n      },\n      patientName: '',\n      patientEmailAddress: '',\n      timeslots: [],\n      valid: false,\n      selected: null,\n      dateSelected: null,\n      dateRules: [function (value) {\n        if (value) return true;\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      function (value) {\n        if (/^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(value)) return true;\n        return \"Date must be in the format YYYY-MM-DD.\";\n      }],\n      timeRules: [function (value) {\n        if (value) return true;\n        return \"Time is required.\";\n      }, function (value) {\n        if (/(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])/.test(value)) return true;\n        return \"Time must be in the format 00:00:00.\";\n      }]\n    };\n  },\n  methods: {\n    clearInput: function clearInput() {\n      this.$refs.appointmentForm.reset();\n    },\n    changeAppointment: function changeAppointment() {\n      if (this.selected === 'Update') {\n        this.updateAppointment();\n      } else {\n        this.deleteAppointment();\n      }\n    },\n    updateAppointment: function updateAppointment() {\n      var _this = this;\n      AppointmentService.updateAppointment(this.appointmentObj.appointmentId, this.appointmentObj).then(function (response) {\n        if (response.status === 200) {\n          //   this.getTimeslots();\n          _this.$router.push(\"/\");\n          _this.$store.state.currentAppointments.commit(\"updateAppointment\", _this.appointment.appointmentId);\n        } else {\n          console.log(\"error updating appointment\");\n        }\n      });\n      //this.$router.push(\"/\");\n    },\n    deleteAppointment: function deleteAppointment() {\n      var _this2 = this;\n      // appointmentObj = this.$store.state.currentAppointments.filter(currentAppointments => currentAppointments.appointmentDate === this.appointment.appointmentDate);\n      this.appointment.appointmentId = this.appointmentObj.appointmentId;\n      AppointmentService.deleteAppointment(this.appointment.appointmentId).then(function (response) {\n        if (response.status === 200) {\n          //   this.getTimeslots();\n          _this2.$router.push(\"/\");\n          _this2.$store.state.currentAppointments.commit(\"deleteAppointment\", _this2.appointment.appointmentId);\n        } else {\n          console.log(\"error deleting appointment\");\n        }\n      });\n    },\n    getTimeSlotByIdAndDate: function getTimeSlotByIdAndDate(id, date) {\n      var _this3 = this;\n      AppointmentService.getTimeArray(id, date).then(function (response) {\n        _this3.timeSlots = response.data;\n      });\n      // service call here to pull data from doctor based on id this.selected and date selected this.dateSelected\n      // will i need to add a list of dates as well as a dropdown menu?\n    },\n    chosenTime: function chosenTime() {\n      var _this4 = this;\n      DoctorTimeService.getTimeArray(this.appointmentObj.doctorId, this.appointmentObj.appointmentDate).then(function (response) {\n        _this4.timeslots = response.data;\n      });\n    },\n    chosenDoctor: function chosenDoctor() {\n      var _this5 = this;\n      this.appointment.doctorId = this.doctorObj.doctorId;\n      console.log(\"id\", this.doctorObj.doctorId);\n      DoctorTimeService.getTimeArray(this.appointment.doctorId, this.appointment.appointmentDate).then(function (response) {\n        _this5.timeslots = response.data;\n      });\n    },\n    chosenAppointment: function chosenAppointment() {\n      var _this6 = this;\n      console.log(\"id\", this.appointment.appointmentId);\n      this.appointment.appointmentId = this.appointmentObj.appointmentId;\n      AppointmentService.getAppointmentById(this.appointment.appointmentId).then(function (response) {\n        _this6.appointment = response.data;\n      });\n      this.chosenTime();\n      PatientService.getPatientById(this.appointmentObj.patientId).then(function (response) {\n        // Assuming the backend returns an object with a name field\n        _this6.patientName = response.data.firstName + ' ' + response.data.lastName;\n        _this6.patientEmailAddress = response.data.emailAddress;\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching patient details:\", error);\n      });\n    }\n  },\n  created: function created() {\n    var _this7 = this;\n    this.appointment.patientId = this.$store.state.currentPatient.patientId;\n    AppointmentService.getTimeArray(this.appointment.doctorId, this.appointment.appointmentDate).then(function (response) {\n      _this7.timeSlots = response.data;\n    });\n  }\n};","map":{"version":3,"names":["AppointmentService","Navbar","DoctorTimeService","PatientService","name","components","data","appointment","patientId","doctorId","appointmentId","appointmentDuration","description","appointmentDate","appointmentTime","appointmentObj","patientName","patientEmailAddress","timeslots","valid","selected","dateSelected","dateRules","value","test","timeRules","methods","clearInput","$refs","appointmentForm","reset","changeAppointment","updateAppointment","deleteAppointment","_this","then","response","status","$router","push","$store","state","currentAppointments","commit","console","log","_this2","getTimeSlotByIdAndDate","id","date","_this3","getTimeArray","timeSlots","chosenTime","_this4","chosenDoctor","_this5","doctorObj","chosenAppointment","_this6","getAppointmentById","getPatientById","firstName","lastName","emailAddress","error","created","_this7","currentPatient"],"sources":["src/components/UpdateDoctorAppointmentForm.vue"],"sourcesContent":["-- /* eslint-disable */\n<template>\n  <v-container fill-height fluid>\n    <navbar />\n    <v-col\n      align=\"center\"\n      justify=\"center\"\n      fill-height\n      class=\"d-flex justify-center\"\n    >\n      <div id=\"appointment\" class=\"text-center\">\n        <v-card>\n          <v-form\n            class=\"px-6 pb-5 pt-6\"\n            ref=\"appointmentForm\"\n            id=\"appointmentForm\"\n            v-model=\"valid\"\n            @submit.prevent=\"changeAppointment\"\n          >\n            <v-img\n              class=\"mx-auto\"\n              src=\"../assets/caduceus-transparent-background-8.png\"\n              max-width=\"50px\"\n              max-height=\"100px\"\n            >\n            </v-img>\n\n            <v-select\n                :items=\"['Update', 'Delete']\"\n                v-model=\"selected\"\n                item-text=\"selected\"\n                item-value=\"id\"\n                return-object\n                dense\n                outlined\n                hide-details\n                class=\"ma-2 pb-6\"\n                label=\"Choose: Update or Delete\"\n            ></v-select>\n\n            <v-select\n              :items=\"this.$store.state.currentAppointments\"\n              v-model=\"appointmentObj\"\n              item-text=\"appointmentDate\"\n              item-value=\"id\"\n              return-object\n              dense\n              outlined\n              hide-details\n              class=\"ma-2 pb-6\"\n              label=\"Your Appointments\"\n              @change=\"chosenAppointment\"\n            >\n            </v-select>\n            <v-text-field\n                v-show=\"selected === 'Update'\"\n                v-model=\"appointmentObj.appointmentDate\"\n                :counter=\"100\"\n                label=\"Appointment Date\"\n                prepend-inner-icon=\"mdi-cake\"\n                required\n            ></v-text-field>\n\n            <v-select\n                v-show=\"selected === 'Update' && appointmentObj.appointmentDate !== ''\"\n                :items=\"timeslots\"\n                v-model=\"appointmentObj.appointmentTime\"\n                dense\n                outlined\n                hide-details\n                class=\"ma-2 pb-6\"\n                label=\"timeslots\"\n                @change=\"chosenTime\"\n            ></v-select>\n\n            <v-text-field\n                v-if=\"patientName\"\n                readonly\n                label=\"Patient Name\"\n                :value=\"patientName\"\n            ></v-text-field>\n\n            <v-text-field\n                v-if=\"patientEmailAddress\"\n                readonly\n                label=\"Patient Email Address\"\n                :value=\"patientEmailAddress\"\n            ></v-text-field>\n            <v-text-field\n                v-show=\"selected === 'Update'\"\n              v-model=\"appointmentObj.description\"\n              :counter=\"100\"\n              label=\"Description\"\n              required\n            >\n            </v-text-field>\n            <v-btn type=\"submit\" :disabled=\"!valid\">Change Appointment</v-btn>\n            <v-btn @click=\"clearInput\"> Clear Fields </v-btn>\n          </v-form>\n        </v-card>\n      </div>\n    </v-col>\n  </v-container>\n</template>\n<script>\nimport AppointmentService from \"../services/AppointmentService\";\nimport Navbar from \"../components/Navbar.vue\";\nimport DoctorTimeService from \"../services/DoctorTimeService\";\nimport PatientService from \"../services/PatientService\";\nexport default {\n  name: \"UpdateAppointmentForm\",\n\n  components: {\n    Navbar,\n  },\n  data: () => ({\n    appointment: {\n      patientId: 0,\n      doctorId: 0,\n      appointmentId: 0,\n      appointmentDuration: 30,\n      description: \"\",\n      appointmentDate: \"\",\n      appointmentTime: \"\",\n    },\n    appointmentObj: {\n      patientId: 0,\n      doctorId: 0,\n      appointmentId: 0,\n      appointmentDuration: 30,\n      description: \"\",\n      appointmentDate: \"\",\n      appointmentTime: \"\",\n    },\n    patientName: '',\n    patientEmailAddress: '',\n    timeslots: [],\n    valid: false,\n    selected: null,\n    dateSelected: null,\n    dateRules: [\n      (value) => {\n        if (value) return true;\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      (value) => {\n        if (\n          /^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(\n            value\n          )\n        )\n          return true;\n        return \"Date must be in the format YYYY-MM-DD.\";\n      },\n    ],\n    timeRules: [\n      (value) => {\n        if (value) return true;\n        return \"Time is required.\";\n      },\n      (value) => {\n        if (/(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])/.test(value))\n          return true;\n        return \"Time must be in the format 00:00:00.\";\n      },\n    ],\n  }),\n  methods: {\n    clearInput() {\n      this.$refs.appointmentForm.reset();\n    },\n    changeAppointment() {\n\n      if(this.selected === 'Update') {\n        this.updateAppointment();\n      } else {\n        this.deleteAppointment();\n      }\n    },\n    updateAppointment() {\n      AppointmentService.updateAppointment(this.appointmentObj.appointmentId, this.appointmentObj).then(\n        (response) => {\n          if (response.status === 200) {\n            //   this.getTimeslots();\n            this.$router.push(\"/\");\n            this.$store.state.currentAppointments.commit(\n                \"updateAppointment\",\n                this.appointment.appointmentId\n            );\n          } else {\n            console.log(\"error updating appointment\");\n          }\n        }\n      );\n      //this.$router.push(\"/\");\n    },\n    deleteAppointment() {\n      // appointmentObj = this.$store.state.currentAppointments.filter(currentAppointments => currentAppointments.appointmentDate === this.appointment.appointmentDate);\n      this.appointment.appointmentId = this.appointmentObj.appointmentId;\n      AppointmentService.deleteAppointment(this.appointment.appointmentId).then(\n        (response) => {\n          if (response.status === 200) {\n            //   this.getTimeslots();\n            this.$router.push(\"/\");\n            this.$store.state.currentAppointments.commit(\n              \"deleteAppointment\",\n              this.appointment.appointmentId\n            );\n          } else {\n            console.log(\"error deleting appointment\");\n          }\n        }\n      );\n    },\n    getTimeSlotByIdAndDate(id, date) {\n      AppointmentService.getTimeArray(id, date).then((response) => {\n        this.timeSlots = response.data;\n      });\n      // service call here to pull data from doctor based on id this.selected and date selected this.dateSelected\n      // will i need to add a list of dates as well as a dropdown menu?\n    },\n    chosenTime() {\n      DoctorTimeService.getTimeArray(\n          this.appointmentObj.doctorId,\n          this.appointmentObj.appointmentDate\n      ).then((response) => {\n        this.timeslots = response.data;\n      });\n    },\n    chosenDoctor() {\n      this.appointment.doctorId = this.doctorObj.doctorId;\n      console.log(\"id\", this.doctorObj.doctorId);\n      DoctorTimeService.getTimeArray(\n        this.appointment.doctorId,\n        this.appointment.appointmentDate\n      ).then((response) => {\n        this.timeslots = response.data;\n      });\n    },\n    chosenAppointment() {\n      console.log(\"id\", this.appointment.appointmentId);\n      this.appointment.appointmentId = this.appointmentObj.appointmentId;\n      AppointmentService.getAppointmentById(\n        this.appointment.appointmentId\n      ).then((response) => {\n        this.appointment = response.data;\n      });\n      this.chosenTime();\n      PatientService.getPatientById(this.appointmentObj.patientId)\n          .then(response => {\n            // Assuming the backend returns an object with a name field\n            this.patientName = response.data.firstName + ' ' + response.data.lastName;\n            this.patientEmailAddress = response.data.emailAddress;\n          })\n          .catch(error => {\n            console.error(\"Error fetching patient details:\", error);\n          })\n    },\n  },\n  created() {\n    this.appointment.patientId = this.$store.state.currentPatient.patientId;\n    AppointmentService.getTimeArray(\n      this.appointment.doctorId,\n      this.appointment.appointmentDate\n    ).then((response) => {\n      this.timeSlots = response.data;\n    });\n  },\n};\n</script>\n\n<style scoped></style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}