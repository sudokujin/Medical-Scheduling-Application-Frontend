{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport authService from '../services/AuthService';\nexport default {\n  name: \"RegisterForm\",\n  data: function data() {\n    return {\n      user: {\n        username: '',\n        password: '',\n        confirmPassword: '',\n        role: 'user'\n      },\n      registrationErrors: false,\n      registrationErrorMsg: 'There were problems registering this user.',\n      valid: false,\n      nameRules: [function (value) {\n        if (value) return true;\n        return 'Name is required.';\n      }, function (value) {\n        if ((value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return 'Name must be less than or equal to 50 characters.';\n      }],\n      passwordRules: [function (value) {\n        if (value) return true;\n        return 'Password is required.';\n      }, function (value) {\n        if (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$^&*()_-]).{8,20}$/.test(value) && (value === null || value === void 0 ? void 0 : value.length) >= 8 && (value === null || value === void 0 ? void 0 : value.length) <= 20) return true;\n        return 'Password must be at least between 8 and 20 characters, have one digit, one lower case, one upper case, and one special character.';\n      }]\n    };\n  },\n  methods: {\n    register: function register() {\n      var _this = this;\n      if (this.user.password != this.user.confirmPassword) {\n        this.registrationErrors = true;\n        this.registrationErrorMsg = 'Password & Confirm Password do not match.';\n      } else {\n        authService.register(this.user).then(function (response) {\n          if (response.status == 201) {\n            _this.$router.push({\n              path: '/patientInfo',\n              query: {\n                registration: 'success'\n              }\n            });\n          }\n        })[\"catch\"](function (error) {\n          var response = error.response;\n          _this.registrationErrors = true;\n          if (response.status === 400) {\n            _this.registrationErrorMsg = 'Bad Request: Validation Errors';\n          }\n        });\n      }\n    },\n    clearErrors: function clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = 'There were problems registering this user.';\n    },\n    clearInput: function clearInput() {\n      this.$refs.registerForm.reset();\n    }\n  }\n};","map":{"version":3,"mappings":";;;AAkEA;AAEA;EACAA;EACAC;IAAA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC,YACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,gBACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA;IAGA;EAAA;EACAC;IACAC;MAAA;MACA;QACA;QACA;MACA;QACAC,YACAD,oBACAE;UACA;YACA;cACAC;cACAC;gBAAAC;cAAA;YACA;UACA;QACA,WACA;UACA;UACA;UACA;YACA;UACA;QACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","data","user","username","password","confirmPassword","role","registrationErrors","registrationErrorMsg","valid","nameRules","passwordRules","methods","register","authService","then","path","query","registration","clearErrors","clearInput"],"sourceRoot":"src/views","sources":["Register.vue"],"sourcesContent":["<template>\n    <v-container fill-height fluid>\n      <v-col align=\"center\" justify=\"center\" fill-height class=\"d-flex justify-center\"> \n        <div id=\"register\" class=\"text-center\">\n          <v-card>\n          <v-form class=\"px-6 pb-5 pt-6\" ref=\"registerForm\" id=\"registerForm\" v-model=\"valid\" @submit.prevent=\"register();\">\n            <v-img class='mx-auto' src='../assets/caduceus-transparent-background-8.png'\n            max-width='50px'\n            max-height='100px'\n            > </v-img>\n            <h1>Please Register</h1>\n            <v-text-field\n                id=\"username\"\n                v-model=\"user.username\"\n                :rules=\"nameRules\"\n                :counter=\"50\"\n                label=\"Username\"\n                prepend-inner-icon=\"mdi-account\"\n                required\n                outlined\n                class=\"mt-4\"\n              ></v-text-field>\n\n            <v-text-field \n                id=\"password\"\n                v-model=\"user.password\"\n                label=\"Password\"\n                :counter=\"20\"\n                :rules=\"passwordRules\"\n                :append-icon=\"show1 ? 'mdi-eye' : 'mdi-eye-off'\"\n                :type=\"show1 ? 'text' : 'user.password'\"\n                prepend-inner-icon=\"mdi-lock\"\n                required\n                outlined\n                @click:append=\"show1 = !show1\"\n            > </v-text-field>\n\n            <v-text-field \n                type=\"password\"\n                id=\"confirmPassword\"\n                v-model=\"user.confirmPassword\"\n                label=\"Confirm Password\"\n                :counter=\"20\"\n                :rules=\"passwordRules\"\n                prepend-inner-icon=\"mdi-lock\"\n                required\n                outlined\n            > </v-text-field>\n\n\n            <v-btn type=\"submit\" :disabled=\"!valid\">Create Account</v-btn>\n\n    \n            <v-btn @click=\"clearInput\">\n              Clear Fields\n            </v-btn>\n\n            <p><router-link :to=\"{ name: 'login' }\">Already have an account? Log in.</router-link></p>\n          </v-form>\n          </v-card>\n        </div>\n      </v-col>\n    </v-container>\n</template>\n\n<script>\nimport authService from '../services/AuthService';\n\n  export default {\n    name: \"RegisterForm\",\n    data: () => ({\n        user: {\n            username: '',\n            password: '',\n            confirmPassword: '',\n            role: 'user',\n        },\n        registrationErrors: false,\n        registrationErrorMsg: 'There were problems registering this user.',\n      valid: false,\n      nameRules: [\n        value => {\n          if (value) return true\n\n          return 'Name is required.'\n        },\n        value => {\n          if (value?.length <= 50) return true\n\n          return 'Name must be less than or equal to 50 characters.'\n        },\n      ],\n      passwordRules: [\n        value => {\n          if (value) return true\n\n          return 'Password is required.'\n        },\n        value => {\n          if (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$^&*()_-]).{8,20}$/.test(value) && value?.length >= 8 && value?.length <= 20) return true\n\n          return 'Password must be at least between 8 and 20 characters, have one digit, one lower case, one upper case, and one special character.'\n        },\n      ],\n\n    }),\n    methods: {\n    register() {\n      if (this.user.password != this.user.confirmPassword) {\n        this.registrationErrors = true;\n        this.registrationErrorMsg = 'Password & Confirm Password do not match.';\n      } else {\n        authService\n          .register(this.user)\n          .then((response) => {\n            if (response.status == 201) {\n              this.$router.push({\n                path: '/patientInfo',\n                query: { registration: 'success' },\n              });\n            }\n          })\n          .catch((error) => {\n            const response = error.response;\n            this.registrationErrors = true;\n            if (response.status === 400) {\n              this.registrationErrorMsg = 'Bad Request: Validation Errors';\n            }\n          });\n      }\n    },\n    clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = 'There were problems registering this user.';\n    },\n    clearInput() {\n        this.$refs.registerForm.reset();\n    },\n    }\n  }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}