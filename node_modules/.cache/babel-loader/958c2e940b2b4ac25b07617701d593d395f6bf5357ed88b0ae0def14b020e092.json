{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kwon/Desktop/repo/Medical-Scheduling-Application-Frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/kwon/Desktop/repo/Medical-Scheduling-Application-Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport Navbar from \"../components/Navbar.vue\";\nimport AppointmentService from \"../services/AppointmentService\";\nimport PatientService from \"@/services/PatientService\";\nexport default {\n  name: \"calendar\",\n  components: {\n    Navbar: Navbar\n  },\n  data: function data() {\n    return {\n      type: \"month\",\n      types: [\"month\", \"week\", \"day\"],\n      mode: \"stack\",\n      weekday: [0, 1, 2, 3, 4, 5, 6],\n      weekdays: [{\n        text: \"Sun - Sat\",\n        value: [0, 1, 2, 3, 4, 5, 6]\n      }, {\n        text: \"Mon - Sun\",\n        value: [1, 2, 3, 4, 5, 6, 0]\n      }, {\n        text: \"Mon - Fri\",\n        value: [1, 2, 3, 4, 5]\n      }],\n      value: \"\",\n      events: [],\n      colors: [\"blue\"],\n      names: [\"Appointment\", \"Holiday\", \"PTO\"],\n      appointments: [],\n      now: \"2023-04-20\",\n      selectedDoctorId: null,\n      // id of doctor,\n      doctors: [],\n      patients: [],\n      doctorObj: {},\n      dialog: false,\n      selectedEvent: {}\n    };\n  },\n  methods: {\n    chosenDoctor: function chosenDoctor() {\n      this.selectedDoctorId = this.doctorObj.doctorId;\n    },\n    getAppointments: function getAppointments() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              AppointmentService.getAppointments().then(function (response) {\n                _this.$store.commit('SET_APPOINTMENTS', response.data);\n                _this.appointments = _this.$store.state.appointments;\n                _this.getEvents();\n              });\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    showEventDetails: function showEventDetails(event) {\n      this.selectedEvent = event;\n      this.dialog = true;\n      // eslint-disable-next-line no-console\n      console.log(\"Clicked event details:\", event);\n    },\n    getEvents: function getEvents() {\n      var _this2 = this;\n      this.events = this.appointments.map(function (temp) {\n        var time = temp.appointmentTime;\n        var endTime;\n        var hourPart = parseInt(time.slice(0, 2));\n        if (time.slice(3, 5) === \"30\") {\n          hourPart++;\n          endTime = hourPart.toString().padStart(2, \"0\") + \":00:00\";\n        } else {\n          endTime = time.slice(0, 2) + \":30:00\";\n        }\n        return {\n          docId: temp.doctorId,\n          name: \"Appointment\",\n          doctorName: _this2.getDoctorName(temp.doctorId),\n          patientName: _this2.getPatientName(temp.patientId),\n          // Add this line\n          start: temp.appointmentDate + \"T\" + temp.appointmentTime,\n          end: temp.appointmentDate + \"T\" + endTime,\n          color: \"blue\",\n          timed: false\n        };\n      });\n    },\n    getDoctorName: function getDoctorName(id) {\n      var doctor = this.doctors.find(function (doc) {\n        return doc.doctorId === id;\n      });\n      // eslint-disable-next-line no-console\n      console.log(\"Doctor fetched for ID:\", id, doctor);\n      return doctor ? doctor.firstName : 'Unknown';\n    },\n    getPatientName: function getPatientName(id) {\n      var patient = this.patients.find(function (pat) {\n        return pat.patientId === id;\n      });\n      // eslint-disable-next-line no-console\n      console.log(\"Patient fetched for ID:\", id, patient);\n      return patient ? patient.firstName : 'Unknown';\n    },\n    getPatients: function getPatients() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              PatientService.getAllPatients().then(function (response) {\n                _this3.$store.commit(\"SET_PATIENTS\", response.data);\n                _this3.patients = _this3.$store.state.patients;\n              });\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  },\n  computed: {\n    // This should filter doctor apponintments by id - attached to :events for calendar\n    filteredAppointments: function filteredAppointments() {\n      var _this4 = this;\n      return this.events.filter(function (appt) {\n        return appt.docId === _this4.selectedDoctorId;\n      });\n    }\n  },\n  created: function created() {\n    var _this5 = this;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return Promise.all([_this5.getAppointments(), _this5.getPatients()]);\n          case 2:\n            _this5.doctors = _this5.$store.state.doctors;\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n};","map":{"version":3,"names":["Navbar","AppointmentService","PatientService","name","components","data","type","types","mode","weekday","weekdays","text","value","events","colors","names","appointments","now","selectedDoctorId","doctors","patients","doctorObj","dialog","selectedEvent","methods","chosenDoctor","doctorId","getAppointments","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","then","response","$store","commit","state","getEvents","stop","showEventDetails","event","console","log","_this2","map","temp","time","appointmentTime","endTime","hourPart","parseInt","slice","toString","padStart","docId","doctorName","getDoctorName","patientName","getPatientName","patientId","start","appointmentDate","end","color","timed","id","doctor","find","doc","firstName","patient","pat","getPatients","_this3","_callee2","_callee2$","_context2","getAllPatients","computed","filteredAppointments","_this4","filter","appt","created","_this5","_callee3","_callee3$","_context3","Promise","all"],"sources":["src/components/Calendar.vue"],"sourcesContent":["<template>\n  <v-container>\n    <navbar />\n    <v-divider></v-divider>\n    <h1>Weekly Calendar</h1>\n    <v-spacer></v-spacer>\n    <div>\n      <v-sheet tile height=\"54\" class=\"d-flex\">\n        <v-btn icon class=\"ma-2\" @click=\"$refs.calendar.prev()\">\n          <v-icon>mdi-chevron-left</v-icon>\n        </v-btn>\n        <v-select\n          v-model=\"type\"\n          :items=\"types\"\n          dense\n          outlined\n          hide-details\n          class=\"ma-2\"\n          label=\"type\"\n        ></v-select>\n        <v-select\n          :items=\"this.$store.state.doctors\"\n          v-model=\"doctorObj\"\n          item-text=\"firstName\"\n          item-value=\"doctorId\"\n          return-object\n          dense\n          outlined\n          hide-details\n          class=\"ma-2\"\n          label=\"doctors\"\n          @change=\"chosenDoctor\"\n        ></v-select>\n        <v-select\n          v-model=\"weekday\"\n          :items=\"weekdays\"\n          dense\n          outlined\n          hide-details\n          label=\"weekdays\"\n          class=\"ma-2\"\n        ></v-select>\n        <v-spacer></v-spacer>\n        <v-btn icon class=\"ma-2\" @click=\"$refs.calendar.next()\">\n          <v-icon>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-sheet>\n      <v-sheet height=\"600\">\n        <v-calendar\n          ref=\"calendar\"\n          v-model=\"value\"\n          :weekdays=\"weekday\"\n          :type=\"type\"\n          :events=\"filteredAppointments\"\n          @click:event=\"showEventDetails\"\n          :now=\"now\"\n        ></v-calendar>\n      </v-sheet>\n      <!-- Dialog for displaying appointment details -->\n      <v-dialog v-model=\"dialog\" max-width=\"400px\">\n        <v-card>\n          <v-card-title>Appointment Details</v-card-title>\n          <v-card-text>\n            <p><strong>Doctor:</strong> {{ selectedEvent.doctorName }}</p>\n            <p><strong>Patient:</strong> {{ selectedEvent.patientName }}</p>\n            <p><strong>Time:</strong> {{ selectedEvent.start }} - {{ selectedEvent.end }}</p>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-1\" text @click=\"dialog = false\">Close</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </div>\n  </v-container>\n</template>\n<script>\nimport Navbar from \"../components/Navbar.vue\";\nimport AppointmentService from \"../services/AppointmentService\";\nimport PatientService from \"@/services/PatientService\";\n\nexport default {\n  name: \"calendar\",\n  components: {\n    Navbar,\n  },\n  data() {\n    return {\n      type: \"month\",\n      types: [\"month\", \"week\", \"day\"],\n      mode: \"stack\",\n      weekday: [0, 1, 2, 3, 4, 5, 6],\n      weekdays: [\n        { text: \"Sun - Sat\", value: [0, 1, 2, 3, 4, 5, 6] },\n        { text: \"Mon - Sun\", value: [1, 2, 3, 4, 5, 6, 0] },\n        { text: \"Mon - Fri\", value: [1, 2, 3, 4, 5] },\n      ],\n      value: \"\",\n      events: [],\n      colors: [\"blue\"],\n      names: [\"Appointment\", \"Holiday\", \"PTO\"],\n      appointments: [],\n      now: \"2023-04-20\",\n      selectedDoctorId: null, // id of doctor,\n      doctors: [],\n      patients: [],\n      doctorObj: {},\n      dialog: false,\n      selectedEvent: {}\n    };\n  },\n  methods: {\n    chosenDoctor() {\n      this.selectedDoctorId = this.doctorObj.doctorId;\n    },\n    async getAppointments() {\n      AppointmentService.getAppointments().then((response) => {\n        this.$store.commit('SET_APPOINTMENTS',response.data);\n        this.appointments = this.$store.state.appointments;\n        this.getEvents();\n      });\n    },\n    showEventDetails(event) {\n      this.selectedEvent = event;\n      this.dialog = true;\n      // eslint-disable-next-line no-console\n      console.log(\"Clicked event details:\", event);\n    },\n    getEvents() {\n  this.events = this.appointments.map((temp) => {\n    let time = temp.appointmentTime;\n    let endTime;\n    let hourPart = parseInt(time.slice(0, 2));\n\n    if (time.slice(3, 5) === \"30\") {\n      hourPart++;\n      endTime = hourPart.toString().padStart(2, \"0\") + \":00:00\";\n    } else {\n      endTime = time.slice(0, 2) + \":30:00\";\n    }\n\n    return {\n      docId: temp.doctorId,\n      name: \"Appointment\",\n      doctorName: this.getDoctorName(temp.doctorId),\n      patientName: this.getPatientName(temp.patientId), // Add this line\n      start: temp.appointmentDate + \"T\" + temp.appointmentTime,\n      end: temp.appointmentDate + \"T\" + endTime,\n      color: \"blue\",\n      timed: false,\n    };\n  });\n},\n    getDoctorName(id) {\n      let doctor = this.doctors.find(doc => doc.doctorId === id);\n      // eslint-disable-next-line no-console\n      console.log(\"Doctor fetched for ID:\", id, doctor);\n      return doctor ? doctor.firstName : 'Unknown';\n    },\n\n    getPatientName(id) {\n      let patient = this.patients.find(pat => pat.patientId === id);\n      // eslint-disable-next-line no-console\n      console.log(\"Patient fetched for ID:\", id, patient);\n      return patient ? patient.firstName : 'Unknown';\n    },\n    async getPatients() {\n      PatientService.getAllPatients().then((response) => {\n        this.$store.commit(\"SET_PATIENTS\", response.data);\n        this.patients = this.$store.state.patients;\n      });\n    }\n  },\n  computed: {\n    // This should filter doctor apponintments by id - attached to :events for calendar\n    filteredAppointments() {\n      return this.events.filter((appt) => appt.docId === this.selectedDoctorId);\n    },\n  },\n  async created() {\n    await Promise.all([this.getAppointments(), this.getPatients()]);\n    this.doctors = this.$store.state.doctors;\n  },\n};\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}