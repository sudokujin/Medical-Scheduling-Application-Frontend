{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport patientService from \"../services/PatientService\";\nexport default {\n  name: \"PatientForm\",\n  data: function data() {\n    return {\n      user: {\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        role: \"user\"\n      },\n      patient: {\n        //user.id = thisUserIdNumber\n        userId: null,\n        firstName: \"\",\n        lastName: \"\",\n        address: \"\",\n        city: \"\",\n        states: \"\",\n        zipcode: \"\",\n        emailAddress: \"\",\n        patientNumber: \"\",\n        birthdate: \"\"\n      },\n      states: [],\n      registrationErrors: false,\n      registrationErrorMsg: \"There were problems registering this user.\",\n      valid: false,\n      nameRules: [function (value) {\n        if (value) return true;\n        return \"Name is required.\";\n      }, function (value) {\n        if ((value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"Name must be less than or equal to 50 characters.\";\n      }],\n      emailRules: [function (value) {\n        if (value) return true;\n        return \"E-mail is required.\";\n      }, function (value) {\n        if (/.+@.+\\..+/.test(value) && (value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"E-mail must be valid and less than 50 characters.\";\n      }],\n      passwordRules: [function (value) {\n        if (value) return true;\n        return \"Password is required.\";\n      }, function (value) {\n        if (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$^&*()_-]).{8,20}$/.test(value) && (value === null || value === void 0 ? void 0 : value.length) >= 8 && (value === null || value === void 0 ? void 0 : value.length) <= 20) return true;\n        return \"Password must be at least between 8 and 20 characters, have one digit, one lower case, one upper case, and one special character.\";\n      }],\n      zipcodeRules: [function (value) {\n        if (value) return true;\n        return \"Zipcode is required.\";\n      }, function (value) {\n        if (/^\\d{5}$|^\\d{5}-\\d{4}$/.test(value)) return true;\n        return \"Zipcode must be at least 5 numbers.\";\n      }],\n      phoneNumberRules: [function (value) {\n        if (value) return true;\n        return \"Phone number is required.\";\n      }, function (value) {\n        if (/^[2-9]\\d{2}-\\d{3}-\\d{4}$/.test(value)) return true;\n        return \"Phone number must be in the format 333-444-5555.\";\n      }],\n      dateRules: [function (value) {\n        if (value) return true;\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      function (value) {\n        if (/^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(value)) return true;\n        return \"Date must be in format YYYY-MM-DD.\";\n      }]\n    };\n  },\n  created: function created() {\n    var _this = this;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var maxUserId;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return patientService.getMaxId();\n            case 2:\n              maxUserId = _context.sent;\n              // set the userId field in the patient object to the maximum userId value + 1\n              _this.patient.userId = maxUserId + 1;\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    clearErrors: function clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput: function clearInput() {\n      this.$refs.registerForm.reset();\n    },\n    registerPatient: function registerPatient() {\n      this.patient.userId = parseInt(this.patient.userId);\n      patientService.create(this.patient);\n      this.$router.push(\"/login\");\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;AA6HA;AAEA;EACAA;EACAC;IAAA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAJ;MACAK;MACAC;MACAC;MACAC,YACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,aACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,gBACA;QACA;QAEA;MACA,GACA;QACA,IACA,kEACAC,MACA,IACA,qEACA,oEAEA;QAEA;MACA,EACA;MACAC,eACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,mBACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,YACA;QACA;QAEA;MACA;MACA;MACA;MACA;QACA,IACA,qJACAH,MACA,EAEA;QAEA;MACA;IAEA;EAAA;EACAI;IAAA;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAEAC;YAAA;cAAAC;cACA;cACA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EACA;EACAC;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACAL;MACA;IACA;EACA;AACA","names":["name","data","user","username","password","confirmPassword","role","patient","userId","firstName","lastName","address","city","states","zipcode","emailAddress","patientNumber","birthdate","registrationErrors","registrationErrorMsg","valid","nameRules","emailRules","passwordRules","value","zipcodeRules","phoneNumberRules","dateRules","created","patientService","maxUserId","methods","clearErrors","clearInput","registerPatient"],"sourceRoot":"src/views","sources":["Patient.vue"],"sourcesContent":["<template>\n  <v-container fill-height fluid>\n    <v-col\n      align=\"center\"\n      justify=\"center\"\n      fill-height\n      class=\"d-flex justify-center\"\n    >\n      <div id=\"register\" class=\"text-center\">\n        <v-card>\n          <v-form\n            class=\"px-6 pb-5 pt-6\"\n            ref=\"registerForm\"\n            id=\"registerForm\"\n            v-model=\"valid\"\n            @submit.prevent=\"registerPatient()\"\n          >\n            <v-img\n              class=\"mx-auto\"\n              src=\"../assets/caduceus-transparent-background-8.png\"\n              max-width=\"50px\"\n              max-height=\"100px\"\n            >\n            </v-img>\n\n            <v-text-field\n              v-model=\"patient.firstName\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"First name\"\n              prepend-inner-icon=\"mdi-rename\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"patient.lastName\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Last name\"\n              prepend-inner-icon=\"mdi-rename\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"patient.emailAddress\"\n              :rules=\"emailRules\"\n              :counter=\"50\"\n              label=\"E-mail\"\n              prepend-inner-icon=\"mdi-email\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"patient.address\"\n              :rules=\"nameRules\"\n              :counter=\"100\"\n              label=\"Address\"\n              prepend-inner-icon=\"mdi-map-marker\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"patient.city\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"City\"\n              prepend-inner-icon=\"mdi-city\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"patient.states\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"State\"\n              prepend-inner-icon=\"mdi-map-marker\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"patient.zipcode\"\n              :rules=\"zipcodeRules\"\n              :counter=\"50\"\n              label=\"Zipcode\"\n              prepend-inner-icon=\"mdi-map-marker\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"patient.patientNumber\"\n              :rules=\"phoneNumberRules\"\n              :counter=\"50\"\n              label=\"Phone Number\"\n              prepend-inner-icon=\"mdi-phone\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"patient.birthdate\"\n              :rules=\"dateRules\"\n              :counter=\"100\"\n              label=\"Birth date\"\n              prepend-inner-icon=\"mdi-cake\"\n              required\n            ></v-text-field>\n\n            <v-btn type=\"submit\" :disabled=\"!valid\"\n              >Submit Patient Information</v-btn\n            >\n\n            <v-btn @click=\"clearInput\"> Clear Fields </v-btn>\n\n            <p>\n              <router-link :to=\"{ name: 'login' }\"\n                >Already have an account? Log in.</router-link\n              >\n            </p>\n          </v-form>\n        </v-card>\n      </div>\n    </v-col>\n  </v-container>\n</template>\n\n<script>\nimport patientService from \"../services/PatientService\";\n\nexport default {\n  name: \"PatientForm\",\n  data: () => ({\n    user: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: \"user\",\n    },\n    patient: {\n      //user.id = thisUserIdNumber\n      userId: null,\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\",\n      city: \"\",\n      states: \"\",\n      zipcode: \"\",\n      emailAddress: \"\",\n      patientNumber: \"\",\n      birthdate: \"\",\n    },\n    states: [],\n    registrationErrors: false,\n    registrationErrorMsg: \"There were problems registering this user.\",\n    valid: false,\n    nameRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Name is required.\";\n      },\n      (value) => {\n        if (value?.length <= 50) return true;\n\n        return \"Name must be less than or equal to 50 characters.\";\n      },\n    ],\n    emailRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"E-mail is required.\";\n      },\n      (value) => {\n        if (/.+@.+\\..+/.test(value) && value?.length <= 50) return true;\n\n        return \"E-mail must be valid and less than 50 characters.\";\n      },\n    ],\n    passwordRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Password is required.\";\n      },\n      (value) => {\n        if (\n          /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$^&*()_-]).{8,20}$/.test(\n            value\n          ) &&\n          value?.length >= 8 &&\n          value?.length <= 20\n        )\n          return true;\n\n        return \"Password must be at least between 8 and 20 characters, have one digit, one lower case, one upper case, and one special character.\";\n      },\n    ],\n    zipcodeRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Zipcode is required.\";\n      },\n      (value) => {\n        if (/^\\d{5}$|^\\d{5}-\\d{4}$/.test(value)) return true;\n\n        return \"Zipcode must be at least 5 numbers.\";\n      },\n    ],\n    phoneNumberRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Phone number is required.\";\n      },\n      (value) => {\n        if (/^[2-9]\\d{2}-\\d{3}-\\d{4}$/.test(value)) return true;\n\n        return \"Phone number must be in the format 333-444-5555.\";\n      },\n    ],\n    dateRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      (value) => {\n        if (\n          /^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(\n            value\n          )\n        )\n          return true;\n\n        return \"Date must be in format YYYY-MM-DD.\";\n      },\n    ],\n  }),\n  async created() {\n    // make an API call to get the maximum userId value\n    const maxUserId = await patientService.getMaxId();\n    // set the userId field in the patient object to the maximum userId value + 1\n    this.patient.userId = maxUserId + 1;\n  },\n  methods: {\n    clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput() {\n      this.$refs.registerForm.reset();\n    },\n    registerPatient() {\n      this.patient.userId = parseInt(this.patient.userId);\n      patientService.create(this.patient);\n      this.$router.push(\"/login\");\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}