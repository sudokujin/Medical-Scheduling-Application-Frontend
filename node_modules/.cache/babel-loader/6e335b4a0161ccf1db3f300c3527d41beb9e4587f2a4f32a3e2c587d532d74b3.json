{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport authService from \"../services/AuthService\";\nexport default {\n  name: \"RegisterForm\",\n  data: function data() {\n    return {\n      user: {\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        role: \"doctor\"\n      },\n      registrationErrors: false,\n      registrationErrorMsg: \"There were problems registering this user.\",\n      valid: false,\n      nameRules: [function (value) {\n        if (value) return true;\n        return \"Name is required.\";\n      }, function (value) {\n        if ((value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"Name must be less than or equal to 50 characters.\";\n      }],\n      passwordRules: [function (value) {\n        if (value) return true;\n        return \"Password is required.\";\n      }, function (value) {\n        if (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$^&*()_-]).{8,20}$/.test(value) && (value === null || value === void 0 ? void 0 : value.length) >= 8 && (value === null || value === void 0 ? void 0 : value.length) <= 20) return true;\n        return \"Password must be at least between 8 and 20 characters, have one digit, one lower case, one upper case, and one special character.\";\n      }]\n    };\n  },\n  methods: {\n    register: function register() {\n      var _this = this;\n      if (this.user.password != this.user.confirmPassword) {\n        this.registrationErrors = true;\n        this.registrationErrorMsg = \"Password & Confirm Password do not match.\";\n      } else {\n        authService.register(this.user).then(function (response) {\n          if (response.status == 201) {\n            _this.$router.push({\n              path: \"/doctorInfo\",\n              query: {\n                registration: \"success\"\n              }\n            });\n          }\n        })[\"catch\"](function (error) {\n          var response = error.response;\n          _this.registrationErrors = true;\n          if (response.status === 400) {\n            _this.registrationErrorMsg = \"Bad Request: Validation Errors\";\n          }\n        });\n      }\n    },\n    clearErrors: function clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput: function clearInput() {\n      this.$refs.registerForm.reset();\n    }\n  }\n};","map":{"version":3,"names":["authService","name","data","user","username","password","confirmPassword","role","registrationErrors","registrationErrorMsg","valid","nameRules","value","length","passwordRules","test","methods","register","_this","then","response","status","$router","push","path","query","registration","error","clearErrors","clearInput","$refs","registerForm","reset"],"sources":["src/components/DoctorAccount.vue"],"sourcesContent":["<template>\n  <v-container fill-height fluid>\n    <v-col\n      align=\"center\"\n      justify=\"center\"\n      fill-height\n      class=\"d-flex justify-center\"\n    >\n      <div id=\"register\" class=\"text-center\">\n        <v-card>\n          <v-form\n            class=\"px-6 pb-5 pt-6\"\n            ref=\"registerForm\"\n            id=\"registerForm\"\n            v-model=\"valid\"\n            @submit.prevent=\"register()\"\n          >\n            <v-img\n              class=\"mx-auto\"\n              src=\"../assets/caduceus-transparent-background-8.png\"\n              max-width=\"50px\"\n              max-height=\"100px\"\n            >\n            </v-img>\n            <h1>Please Register Doctor's Account</h1>\n            <v-text-field\n              id=\"username\"\n              v-model=\"user.username\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Username\"\n              prepend-inner-icon=\"mdi-account\"\n              required\n              outlined\n              class=\"mt-4\"\n            ></v-text-field>\n\n            <v-text-field\n              type=\"password\"\n              id=\"password\"\n              v-model=\"user.password\"\n              label=\"Password\"\n              :counter=\"20\"\n              :rules=\"nameRules\"\n              prepend-inner-icon=\"mdi-lock\"\n              required\n              outlined\n            >\n            </v-text-field>\n\n            <v-text-field\n              type=\"password\"\n              id=\"confirmPassword\"\n              v-model=\"user.confirmPassword\"\n              label=\"Confirm Password\"\n              :counter=\"20\"\n              :rules=\"nameRules\"\n              prepend-inner-icon=\"mdi-lock\"\n              required\n              outlined\n            >\n            </v-text-field>\n\n            <v-btn type=\"submit\" :disabled=\"!valid\">Create Account</v-btn>\n\n            <v-btn @click=\"clearInput\"> Clear Fields </v-btn>\n          </v-form>\n        </v-card>\n      </div>\n    </v-col>\n  </v-container>\n</template>\n\n<script>\nimport authService from \"../services/AuthService\";\n\nexport default {\n  name: \"RegisterForm\",\n  data: () => ({\n    user: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: \"doctor\",\n    },\n    registrationErrors: false,\n    registrationErrorMsg: \"There were problems registering this user.\",\n    valid: false,\n    nameRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Name is required.\";\n      },\n      (value) => {\n        if (value?.length <= 50) return true;\n\n        return \"Name must be less than or equal to 50 characters.\";\n      },\n    ],\n    passwordRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Password is required.\";\n      },\n      (value) => {\n        if (\n          /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$^&*()_-]).{8,20}$/.test(\n            value\n          ) &&\n          value?.length >= 8 &&\n          value?.length <= 20\n        )\n          return true;\n\n        return \"Password must be at least between 8 and 20 characters, have one digit, one lower case, one upper case, and one special character.\";\n      },\n    ],\n  }),\n  methods: {\n    register() {\n      if (this.user.password != this.user.confirmPassword) {\n        this.registrationErrors = true;\n        this.registrationErrorMsg = \"Password & Confirm Password do not match.\";\n      } else {\n        authService\n          .register(this.user)\n          .then((response) => {\n            if (response.status == 201) {\n              this.$router.push({\n                path: \"/doctorInfo\",\n                query: { registration: \"success\" },\n              });\n            }\n          })\n          .catch((error) => {\n            const response = error.response;\n            this.registrationErrors = true;\n            if (response.status === 400) {\n              this.registrationErrorMsg = \"Bad Request: Validation Errors\";\n            }\n          });\n      }\n    },\n    clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput() {\n      this.$refs.registerForm.reset();\n    },\n  },\n};\n</script>\n"],"mappings":";;;AA0EA,OAAAA,WAAA;AAEA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IAAA;MACAC,IAAA;QACAC,QAAA;QACAC,QAAA;QACAC,eAAA;QACAC,IAAA;MACA;MACAC,kBAAA;MACAC,oBAAA;MACAC,KAAA;MACAC,SAAA,GACA,UAAAC,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,KAAAA,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAAC,MAAA;QAEA;MACA,EACA;MACAC,aAAA,GACA,UAAAF,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,IACA,6DAAAG,IAAA,CACAH,KACA,KACA,CAAAA,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAAC,MAAA,UACA,CAAAD,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAAC,MAAA,SAEA;QAEA;MACA;IAEA;EAAA;EACAG,OAAA;IACAC,QAAA,WAAAA,SAAA;MAAA,IAAAC,KAAA;MACA,SAAAf,IAAA,CAAAE,QAAA,SAAAF,IAAA,CAAAG,eAAA;QACA,KAAAE,kBAAA;QACA,KAAAC,oBAAA;MACA;QACAT,WAAA,CACAiB,QAAA,MAAAd,IAAA,EACAgB,IAAA,WAAAC,QAAA;UACA,IAAAA,QAAA,CAAAC,MAAA;YACAH,KAAA,CAAAI,OAAA,CAAAC,IAAA;cACAC,IAAA;cACAC,KAAA;gBAAAC,YAAA;cAAA;YACA;UACA;QACA,WACA,WAAAC,KAAA;UACA,IAAAP,QAAA,GAAAO,KAAA,CAAAP,QAAA;UACAF,KAAA,CAAAV,kBAAA;UACA,IAAAY,QAAA,CAAAC,MAAA;YACAH,KAAA,CAAAT,oBAAA;UACA;QACA;MACA;IACA;IACAmB,WAAA,WAAAA,YAAA;MACA,KAAApB,kBAAA;MACA,KAAAC,oBAAA;IACA;IACAoB,UAAA,WAAAA,WAAA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}