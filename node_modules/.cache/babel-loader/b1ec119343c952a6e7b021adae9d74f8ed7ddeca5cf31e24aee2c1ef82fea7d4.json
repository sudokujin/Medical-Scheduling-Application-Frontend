{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nVue.use(Vuex);\n\n/*\n * The authorization header is set for axios when you login but what happens when you come back or\n * the page is refreshed. When that happens you need to check for the token in local storage and if it\n * exists you should set the header so that it will be attached to each request\n */\nvar currentToken = localStorage.getItem('token');\nvar currentUser = JSON.parse(localStorage.getItem('user'));\nif (currentToken != null) {\n  axios.defaults.headers.common['Authorization'] = \"Bearer \".concat(currentToken);\n}\nexport default new Vuex.Store({\n  state: {\n    token: currentToken || '',\n    user: currentUser || {},\n    doctors: [],\n    patients: [],\n    timeSlots: [],\n    currentPatient: {},\n    appointments: [],\n    reviews: [],\n    doctorToUpdate: {},\n    timeSlotByDoctor: [],\n    patientId: 0,\n    doctorId: 0\n  },\n  mutations: {\n    SET_AUTH_TOKEN: function SET_AUTH_TOKEN(state, token) {\n      state.token = token;\n      localStorage.setItem('token', token);\n      axios.defaults.headers.common['Authorization'] = \"Bearer \".concat(token);\n    },\n    SET_USER: function SET_USER(state, user) {\n      state.user = user;\n      localStorage.setItem('user', JSON.stringify(user));\n    },\n    LOGOUT: function LOGOUT(state) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      state.token = '';\n      state.user = {};\n      axios.defaults.headers.common = {};\n    },\n    SET_DOCTORS: function SET_DOCTORS(state, data) {\n      state.doctors = data;\n    },\n    SET_PATIENTS: function SET_PATIENTS(state, data) {\n      state.patients = data;\n    },\n    SET_TIMESLOTS: function SET_TIMESLOTS(state, data) {\n      state.timeSlots = data;\n    },\n    SET_PATIENT: function SET_PATIENT(state, data) {\n      state.currentPatient = data;\n    },\n    SET_APPOINTMENTS: function SET_APPOINTMENTS(state, data) {\n      state.appointments = data;\n    },\n    SET_REVIEWS: function SET_REVIEWS(state, data) {\n      state.reviews = data;\n    },\n    SET_DOCTORTOUPDATE: function SET_DOCTORTOUPDATE(state, data) {\n      state.doctorToUpdate = data;\n    },\n    SET_TIMESLOTBYDOC: function SET_TIMESLOTBYDOC(state, data) {\n      state.timeSlotByDoctor = data;\n    },\n    SET_PATIENT_ID: function SET_PATIENT_ID(state, data) {\n      state.patientId = data;\n    },\n    SET_DOCTOR_ID: function SET_DOCTOR_ID(state, data) {\n      state.doctorId = data;\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","axios","use","currentToken","localStorage","getItem","currentUser","JSON","parse","defaults","headers","common","Store","state","token","user","doctors","patients","timeSlots","currentPatient","appointments","reviews","doctorToUpdate","timeSlotByDoctor","patientId","doctorId","mutations","SET_AUTH_TOKEN","setItem","SET_USER","stringify","LOGOUT","removeItem","SET_DOCTORS","data","SET_PATIENTS","SET_TIMESLOTS","SET_PATIENT","SET_APPOINTMENTS","SET_REVIEWS","SET_DOCTORTOUPDATE","SET_TIMESLOTBYDOC","SET_PATIENT_ID","SET_DOCTOR_ID"],"sources":["C:/Users/guild/workspace/nlr-12-java-purple-team-0/vue/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\n\nVue.use(Vuex)\n\n/*\n * The authorization header is set for axios when you login but what happens when you come back or\n * the page is refreshed. When that happens you need to check for the token in local storage and if it\n * exists you should set the header so that it will be attached to each request\n */\nconst currentToken = localStorage.getItem('token')\nconst currentUser = JSON.parse(localStorage.getItem('user'));\n\nif(currentToken != null) {\n  axios.defaults.headers.common['Authorization'] = `Bearer ${currentToken}`;\n}\n\nexport default new Vuex.Store({\n  state: {\n    token: currentToken || '',\n    user: currentUser || {},\n    doctors: [],\n    patients: [],\n    timeSlots:[],\n    currentPatient: {},\n    appointments: [],\n    reviews: [],\n    doctorToUpdate: {},\n    timeSlotByDoctor: [],\n    patientId: 0,\n    doctorId: 0,\n  },\n  mutations: {\n    SET_AUTH_TOKEN(state, token) {\n      state.token = token;\n      localStorage.setItem('token', token);\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n    },\n    SET_USER(state, user) {\n      state.user = user;\n      localStorage.setItem('user',JSON.stringify(user));\n    },\n    LOGOUT(state) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      state.token = '';\n      state.user = {};\n      axios.defaults.headers.common = {};\n    },\n    SET_DOCTORS(state, data) {\n      state.doctors = data;\n    },\n    SET_PATIENTS(state, data) {\n      state.patients = data;\n    },\n    SET_TIMESLOTS(state, data) {\n      state.timeSlots = data;\n    },\n    SET_PATIENT(state, data) {\n      state.currentPatient = data;\n    },\n    SET_APPOINTMENTS(state, data) {\n      state.appointments = data;\n    },\n    SET_REVIEWS(state, data) {\n      state.reviews = data;\n    },\n    SET_DOCTORTOUPDATE(state, data) {\n      state.doctorToUpdate = data;\n    },\n    SET_TIMESLOTBYDOC(state, data) {\n      state.timeSlotByDoctor = data;\n    },\n    SET_PATIENT_ID(state, data) {\n      state.patientId = data;\n    },\n    SET_DOCTOR_ID(state, data) {\n      state.doctorId = data;\n    }\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}