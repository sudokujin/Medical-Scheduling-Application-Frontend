{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from 'axios';\n/* eslint-disable */\nvar userId = 5;\nvar http = axios.create({\n  baseURL: \"http://localhost:5000\"\n});\nexport default {\n  getAllDoctors: function getAllDoctors() {\n    return http.get('/doctors');\n  },\n  get: function get(id) {\n    return http.get(\"/doctors/\".concat(id));\n  },\n  createDoctor: function createDoctor(doctor) {\n    return http.post('/doctors', doctor);\n  },\n  updateDoctor: function updateDoctor(id, doctor) {\n    return http.put(\"/doctors/\".concat(id), doctor);\n  },\n  deleteDoctor: function deleteDoctor(id) {\n    return http[\"delete\"](\"/doctors/\".concat(id));\n  },\n  getMaxId: function getMaxId() {\n    var _this = this;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var config, response;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              config = {\n                headers: {\n                  'Accept': 'application/json'\n                }\n              };\n              _context.next = 3;\n              return axios.get('http://localhost:9000/doctors/maxId', config);\n            case 3:\n              response = _context.sent;\n              _this.response = JSON.parse(response.data.userId);\n              console.log(_this.response);\n              return _context.abrupt(\"return\", _this.response);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  getCurrentDoctorId: function getCurrentDoctorId(userId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var config, response, doctorId;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              config = {\n                headers: {\n                  'Accept': 'application/json'\n                }\n              };\n              _context2.next = 3;\n              return axios.get(\"http://localhost:9000/doctors/getDoctorId/\".concat(userId), config);\n            case 3:\n              response = _context2.sent;\n              doctorId = JSON.parse(response.data.doctorId);\n              console.log(doctorId);\n              return _context2.abrupt(\"return\", doctorId);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  getDoctorByUserId: function getDoctorByUserId(id) {}\n};","map":{"version":3,"names":["axios","userId","http","create","baseURL","getAllDoctors","get","id","createDoctor","doctor","post","updateDoctor","put","deleteDoctor","getMaxId","config","headers","response","JSON","parse","data","console","log","getCurrentDoctorId","doctorId","getDoctorByUserId"],"sources":["C:/Users/guild/workspace/MedicalSchedulerApp/vue/src/services/DoctorService.js"],"sourcesContent":["import axios from 'axios';\n/* eslint-disable */\nvar userId = 5;\nconst http = axios.create({\n    baseURL: \"http://localhost:5000\"\n});\n\nexport default {\n    getAllDoctors() {\n        return http.get('/doctors');\n    },\n\n    get(id) {\n        return http.get(`/doctors/${id}`);\n    },\n\n    createDoctor(doctor) {\n        return http.post('/doctors', doctor);\n    },\n    \n    updateDoctor(id, doctor) {\n        return http.put(`/doctors/${id}`, doctor);\n    },\n\n    deleteDoctor(id) {\n        return http.delete(`/doctors/${id}`);\n    },\n    async getMaxId() {\n        let config = {\n            headers: {\n                'Accept': 'application/json'\n            }\n        }\n        const response = await axios.get('http://localhost:9000/doctors/maxId', config)\n        this.response = JSON.parse(response.data.userId);\n        console.log(this.response);\n        return this.response;\n    },\n    async getCurrentDoctorId(userId) {\n        let config = {\n            headers: {\n                'Accept' : 'application/json'\n            }\n        }\n        const response = await axios.get(`http://localhost:9000/doctors/getDoctorId/${userId}`, config);\n        let doctorId = JSON.parse(response.data.doctorId);\n        console.log(doctorId);\n        return doctorId;\n    },\n    getDoctorByUserId(id) {\n        \n    }\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,IAAIC,MAAM,GAAG,CAAC;AACd,IAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM,CAAC;EACtBC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,eAAe;EACXC,aAAa,2BAAG;IACZ,OAAOH,IAAI,CAACI,GAAG,CAAC,UAAU,CAAC;EAC/B,CAAC;EAEDA,GAAG,eAACC,EAAE,EAAE;IACJ,OAAOL,IAAI,CAACI,GAAG,oBAAaC,EAAE,EAAG;EACrC,CAAC;EAEDC,YAAY,wBAACC,MAAM,EAAE;IACjB,OAAOP,IAAI,CAACQ,IAAI,CAAC,UAAU,EAAED,MAAM,CAAC;EACxC,CAAC;EAEDE,YAAY,wBAACJ,EAAE,EAAEE,MAAM,EAAE;IACrB,OAAOP,IAAI,CAACU,GAAG,oBAAaL,EAAE,GAAIE,MAAM,CAAC;EAC7C,CAAC;EAEDI,YAAY,wBAACN,EAAE,EAAE;IACb,OAAOL,IAAI,UAAO,oBAAaK,EAAE,EAAG;EACxC,CAAC;EACKO,QAAQ,sBAAG;IAAA;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cACTC,MAAM,GAAG;gBACTC,OAAO,EAAE;kBACL,QAAQ,EAAE;gBACd;cACJ,CAAC;cAAA;cAAA,OACsBhB,KAAK,CAACM,GAAG,CAAC,qCAAqC,EAAES,MAAM,CAAC;YAAA;cAAzEE,QAAQ;cACd,KAAI,CAACA,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACF,QAAQ,CAACG,IAAI,CAACnB,MAAM,CAAC;cAChDoB,OAAO,CAACC,GAAG,CAAC,KAAI,CAACL,QAAQ,CAAC;cAAC,iCACpB,KAAI,CAACA,QAAQ;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EACxB,CAAC;EACKM,kBAAkB,8BAACtB,MAAM,EAAE;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cACzBc,MAAM,GAAG;gBACTC,OAAO,EAAE;kBACL,QAAQ,EAAG;gBACf;cACJ,CAAC;cAAA;cAAA,OACsBhB,KAAK,CAACM,GAAG,qDAA8CL,MAAM,GAAIc,MAAM,CAAC;YAAA;cAAzFE,QAAQ;cACVO,QAAQ,GAAGN,IAAI,CAACC,KAAK,CAACF,QAAQ,CAACG,IAAI,CAACI,QAAQ,CAAC;cACjDH,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;cAAC,kCACfA,QAAQ;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EACnB,CAAC;EACDC,iBAAiB,6BAAClB,EAAE,EAAE,CAEtB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}