{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport DoctorService from \"../services/DoctorService\";\nexport default {\n  name: \"UpdateDoctorForm\",\n  data: function data() {\n    return {\n      doctor: {\n        doctorId: 0,\n        userId: 0,\n        firstName: \"\",\n        lastName: \"\",\n        specialty: \"\",\n        suiteNumber: \"\",\n        costPerHour: \"\",\n        phoneNumber: \"\"\n      },\n      registrationErrors: false,\n      registrationErrorMsg: \"There were problems registering this user.\",\n      valid: false,\n      nameRules: [function (value) {\n        if (value) return true;\n        return \"Name is required.\";\n      }, function (value) {\n        if ((value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"Name must be less than or equal to 50 characters.\";\n      }],\n      emailRules: [function (value) {\n        if (value) return true;\n        return \"E-mail is required.\";\n      }, function (value) {\n        if (/.+@.+\\..+/.test(value) && (value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"E-mail must be valid and less than 50 characters.\";\n      }],\n      zipcodeRules: [function (value) {\n        if (value) return true;\n        return \"Zipcode is required.\";\n      }, function (value) {\n        if (/^\\d{5}$|^\\d{5}-\\d{4}$/.test(value)) return true;\n        return \"Zipcode must be at least 5 numbers.\";\n      }],\n      phoneNumberRules: [function (value) {\n        if (value) return true;\n        return \"Phone number is required.\";\n      }, function (value) {\n        if (/^[2-9]\\d{2}-\\d{3}-\\d{4}$/.test(value)) return true;\n        return \"Phone number must be in the format 333-444-5555.\";\n      }]\n    };\n  },\n  methods: {\n    clearErrors: function clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput: function clearInput() {\n      this.$refs.updateDoctorForm.reset();\n    },\n    updateDoctor: function updateDoctor() {\n      var _this = this;\n      DoctorService.updateDoctor(this.doctor.doctorId, this.doctor).then(function (response) {\n        if (response.status === 200) {\n          _this.$router.push(\"/\");\n        }\n      });\n    }\n  },\n  created: function created() {\n    this.doctor.userId = this.$store.state.doctorToUpdate.userId;\n    this.doctor.doctorId = this.$store.state.doctorToUpdate.doctorId;\n    this.doctor = this.$store.state.doctorToUpdate;\n    // console.log(\"start\");\n    // console.log(this.$store.state.doctorToUpdate);\n    // console.log(\"end\");\n  }\n};","map":{"version":3,"names":["DoctorService","name","data","doctor","doctorId","userId","firstName","lastName","specialty","suiteNumber","costPerHour","phoneNumber","registrationErrors","registrationErrorMsg","valid","nameRules","value","length","emailRules","test","zipcodeRules","phoneNumberRules","methods","clearErrors","clearInput","$refs","updateDoctorForm","reset","updateDoctor","_this","then","response","status","$router","push","created","$store","state","doctorToUpdate"],"sources":["src/components/UpdateDoctorForm.vue"],"sourcesContent":["<template>\n  <v-container fill-height fluid>\n    <v-col\n      align=\"center\"\n      justify=\"center\"\n      fill-height\n      class=\"d-flex justify-center\"\n    >\n      <v-card>\n        <div id=\"updateDoctor\" class=\"text-center\">\n          <v-form\n            class=\"px-6 pb-5 pt-6\"\n            ref=\"updateDoctorForm\"\n            id=\"userId\"\n            v-model=\"valid\"\n            @submit.prevent=\"updateDoctor()\"\n          >\n            <v-img\n              class=\"mx-auto\"\n              src=\"../assets/caduceus-transparent-background-8.png\"\n              max-width=\"50px\"\n              max-height=\"100px\"\n            >\n            </v-img>\n            <h1>Enter Updated Information</h1>\n            <v-text-field\n              v-model=\"doctor.firstName\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"First name\"\n              prepend-inner-icon=\"mdi-rename\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"doctor.lastName\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Last name\"\n              prepend-inner-icon=\"mdi-rename\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"doctor.specialty\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Specialty\"\n              prepend-inner-icon=\"mdi-account-star\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"doctor.suiteNumber\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Suite Number\"\n              prepend-inner-icon=\"mdi-map-marker\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"doctor.costPerHour\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Cost Per Hour\"\n              prepend-inner-icon=\"mdi-currency-usd\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"doctor.phoneNumber\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Phone Number\"\n              prepend-inner-icon=\"mdi-phone\"\n              required\n            ></v-text-field>\n\n            <v-btn type=\"submit\" :disabled=\"!valid\"\n              >Submit Updated Information</v-btn\n            >\n\n            <v-btn @click=\"clearInput\"> Clear Fields </v-btn>\n          </v-form>\n        </div>\n      </v-card>\n    </v-col>\n  </v-container>\n</template>\n\n<script>\nimport DoctorService from \"../services/DoctorService\";\n\nexport default {\n  name: \"UpdateDoctorForm\",\n  data: () => ({\n    doctor: {\n      doctorId: 0,\n      userId: 0,\n      firstName: \"\",\n      lastName: \"\",\n      specialty: \"\",\n      suiteNumber: \"\",\n      costPerHour: \"\",\n      phoneNumber: \"\",\n    },\n    registrationErrors: false,\n    registrationErrorMsg: \"There were problems registering this user.\",\n    valid: false,\n    nameRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Name is required.\";\n      },\n      (value) => {\n        if (value?.length <= 50) return true;\n\n        return \"Name must be less than or equal to 50 characters.\";\n      },\n    ],\n    emailRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"E-mail is required.\";\n      },\n      (value) => {\n        if (/.+@.+\\..+/.test(value) && value?.length <= 50) return true;\n\n        return \"E-mail must be valid and less than 50 characters.\";\n      },\n    ],\n    zipcodeRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Zipcode is required.\";\n      },\n      (value) => {\n        if (/^\\d{5}$|^\\d{5}-\\d{4}$/.test(value)) return true;\n\n        return \"Zipcode must be at least 5 numbers.\";\n      },\n    ],\n    phoneNumberRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Phone number is required.\";\n      },\n      (value) => {\n        if (/^[2-9]\\d{2}-\\d{3}-\\d{4}$/.test(value)) return true;\n\n        return \"Phone number must be in the format 333-444-5555.\";\n      },\n    ],\n  }),\n  methods: {\n    clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput() {\n      this.$refs.updateDoctorForm.reset();\n    },\n    updateDoctor() {\n      DoctorService.updateDoctor(this.doctor.doctorId, this.doctor).then(\n        (response) => {\n          if (response.status === 200) {\n            this.$router.push(\"/\");\n          }\n        }\n      );\n    },\n  },\n  created() {\n    this.doctor.userId = this.$store.state.doctorToUpdate.userId;\n    this.doctor.doctorId = this.$store.state.doctorToUpdate.doctorId;\n    this.doctor = this.$store.state.doctorToUpdate;\n    // console.log(\"start\");\n    // console.log(this.$store.state.doctorToUpdate);\n    // console.log(\"end\");\n  },\n};\n</script>\n"],"mappings":";;;AAuFA,OAAAA,aAAA;AAEA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IAAA;MACAC,MAAA;QACAC,QAAA;QACAC,MAAA;QACAC,SAAA;QACAC,QAAA;QACAC,SAAA;QACAC,WAAA;QACAC,WAAA;QACAC,WAAA;MACA;MACAC,kBAAA;MACAC,oBAAA;MACAC,KAAA;MACAC,SAAA,GACA,UAAAC,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,KAAAA,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAAC,MAAA;QAEA;MACA,EACA;MACAC,UAAA,GACA,UAAAF,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,gBAAAG,IAAA,CAAAH,KAAA,MAAAA,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAAC,MAAA;QAEA;MACA,EACA;MACAG,YAAA,GACA,UAAAJ,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,4BAAAG,IAAA,CAAAH,KAAA;QAEA;MACA,EACA;MACAK,gBAAA,GACA,UAAAL,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,+BAAAG,IAAA,CAAAH,KAAA;QAEA;MACA;IAEA;EAAA;EACAM,OAAA;IACAC,WAAA,WAAAA,YAAA;MACA,KAAAX,kBAAA;MACA,KAAAC,oBAAA;IACA;IACAW,UAAA,WAAAA,WAAA;MACA,KAAAC,KAAA,CAAAC,gBAAA,CAAAC,KAAA;IACA;IACAC,YAAA,WAAAA,aAAA;MAAA,IAAAC,KAAA;MACA7B,aAAA,CAAA4B,YAAA,MAAAzB,MAAA,CAAAC,QAAA,OAAAD,MAAA,EAAA2B,IAAA,CACA,UAAAC,QAAA;QACA,IAAAA,QAAA,CAAAC,MAAA;UACAH,KAAA,CAAAI,OAAA,CAAAC,IAAA;QACA;MACA,CACA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAhC,MAAA,CAAAE,MAAA,QAAA+B,MAAA,CAAAC,KAAA,CAAAC,cAAA,CAAAjC,MAAA;IACA,KAAAF,MAAA,CAAAC,QAAA,QAAAgC,MAAA,CAAAC,KAAA,CAAAC,cAAA,CAAAlC,QAAA;IACA,KAAAD,MAAA,QAAAiC,MAAA,CAAAC,KAAA,CAAAC,cAAA;IACA;IACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}