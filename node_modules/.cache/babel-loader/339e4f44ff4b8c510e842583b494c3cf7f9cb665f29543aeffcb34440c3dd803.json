{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Navbar from \"../components/Navbar.vue\";\nimport AppointmentService from \"../services/AppointmentService\";\nexport default {\n  name: \"calendar\",\n  components: {\n    Navbar: Navbar\n  },\n  data: function data() {\n    return {\n      type: \"month\",\n      types: [\"month\", \"week\", \"day\"],\n      mode: \"stack\",\n      weekday: [0, 1, 2, 3, 4, 5, 6],\n      weekdays: [{\n        text: \"Sun - Sat\",\n        value: [0, 1, 2, 3, 4, 5, 6]\n      }, {\n        text: \"Mon - Sun\",\n        value: [1, 2, 3, 4, 5, 6, 0]\n      }, {\n        text: \"Mon - Fri\",\n        value: [1, 2, 3, 4, 5]\n      }],\n      value: \"\",\n      events: [],\n      colors: [\"blue\"],\n      names: [\"Appointment\", \"Holiday\", \"PTO\"],\n      appointments: [],\n      now: \"2023-04-20\",\n      selectedDoctorId: null,\n      // id of doctor,\n      doctors: [],\n      doctorObj: {},\n      eventName: \"Patient Name\"\n    };\n  },\n  methods: {\n    chosenDoctor: function chosenDoctor() {\n      this.selectedDoctorId = this.doctorObj.doctorId;\n    },\n    getAppointments: function getAppointments() {\n      var _this = this;\n      AppointmentService.getAppointments().then(function (response) {\n        _this.$store.commit(\"SET_APPOINTMENTS\", response.data);\n        _this.appointments = _this.$store.state.appointments;\n        _this.getEvents();\n      });\n    },\n    getEvents: function getEvents() {\n      var _this2 = this;\n      var _loop = function _loop(i) {\n        var temp = _this2.appointments[i];\n        var time = _this2.appointments[i].appointmentTime;\n        var endTime;\n        if (time.slice(3, 5) === \"30\") {\n          endTime = time.slice(0, 2);\n          parseInt(endTime);\n          endTime++;\n          endTime = endTime.toString() + \":00:00\";\n        } else {\n          endTime = time.slice(0, 2) + \":30:00\";\n        }\n        // Fetch the patient's name using the AppointmentService\n        AppointmentService.getPatientDetails(_this2.appointments[i].patientId).then(function (response) {\n          var patientName = response.data.firstName;\n\n          // Create the event with the patient's name\n          var event = {\n            docId: _this2.appointments[i].doctorId,\n            name: patientName,\n            // Use the patient's name\n            start: temp.appointmentDate + \"T\" + temp.appointmentTime,\n            end: temp.appointmentDate += \"T\" + endTime,\n            color: \"blue\",\n            timed: false\n          };\n          _this2.events.push(event);\n        });\n      };\n      for (var i = 0; i < this.appointments.length; i++) {\n        _loop(i);\n      }\n    }\n  },\n  watch: {\n    filteredAppointments: function filteredAppointments(val) {\n      var _val$;\n      this.eventName = ((_val$ = val[0]) === null || _val$ === void 0 ? void 0 : _val$.patientName) || \"Patient Name\";\n    }\n  },\n  computed: {\n    // This should filter doctor apponintments by id - attached to :events for calendar\n    filteredAppointments: function filteredAppointments() {\n      var _this3 = this;\n      return this.events.filter(function (appt) {\n        return appt.docId === _this3.selectedDoctorId;\n      }).map(function (appt) {\n        return {\n          name: appt.name,\n          start: appt.start,\n          end: appt.end,\n          color: appt.color,\n          timed: appt.timed\n        };\n      });\n    }\n  },\n  created: function created() {\n    this.getAppointments();\n    this.doctors = this.$store.state.doctors;\n  }\n};","map":{"version":3,"names":["Navbar","AppointmentService","name","components","data","type","types","mode","weekday","weekdays","text","value","events","colors","names","appointments","now","selectedDoctorId","doctors","doctorObj","eventName","methods","chosenDoctor","doctorId","getAppointments","_this","then","response","$store","commit","state","getEvents","_this2","_loop","i","temp","time","appointmentTime","endTime","slice","parseInt","toString","getPatientDetails","patientId","patientName","firstName","event","docId","start","appointmentDate","end","color","timed","push","length","watch","filteredAppointments","val","_val$","computed","_this3","filter","appt","map","created"],"sources":["src/components/Calendar.vue"],"sourcesContent":["<template>\n  <v-container>\n    <navbar />\n    <v-divider></v-divider>\n    <h1>Weekly Calendar</h1>\n    <v-spacer></v-spacer>\n    <div>\n      <v-sheet tile height=\"54\" class=\"d-flex\">\n        <v-btn icon class=\"ma-2\" @click=\"$refs.calendar.prev()\">\n          <v-icon>mdi-chevron-left</v-icon>\n        </v-btn>\n        <v-select\n          v-model=\"type\"\n          :items=\"types\"\n          dense\n          outlined\n          hide-details\n          class=\"ma-2\"\n          label=\"type\"\n        ></v-select>\n        <v-select\n          :items=\"this.$store.state.doctors\"\n          v-model=\"doctorObj\"\n          item-text=\"firstName\"\n          item-value=\"doctorId\"\n          return-object\n          dense\n          outlined\n          hide-details\n          class=\"ma-2\"\n          label=\"doctors\"\n          @change=\"chosenDoctor\"\n        ></v-select>\n        <v-select\n          v-model=\"weekday\"\n          :items=\"weekdays\"\n          dense\n          outlined\n          hide-details\n          label=\"weekdays\"\n          class=\"ma-2\"\n        ></v-select>\n        <v-spacer></v-spacer>\n        <v-btn icon class=\"ma-2\" @click=\"$refs.calendar.next()\">\n          <v-icon>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-sheet>\n      <v-sheet height=\"600\">\n        <v-calendar\n          ref=\"calendar\"\n          v-model=\"value\"\n          :weekdays=\"weekday\"\n          :type=\"type\"\n          :events=\"filteredAppointments\"\n          :now=\"now\"\n          :event-name=\"eventName\"\n        ></v-calendar>\n      </v-sheet>\n    </div>\n  </v-container>\n</template>\n<script>\nimport Navbar from \"../components/Navbar.vue\";\nimport AppointmentService from \"../services/AppointmentService\";\n\n\n\nexport default {\n  name: \"calendar\",\n  components: {\n    Navbar,\n  },\n  data() {\n    return {\n      type: \"month\",\n      types: [\"month\", \"week\", \"day\"],\n      mode: \"stack\",\n      weekday: [0, 1, 2, 3, 4, 5, 6],\n      weekdays: [\n        { text: \"Sun - Sat\", value: [0, 1, 2, 3, 4, 5, 6] },\n        { text: \"Mon - Sun\", value: [1, 2, 3, 4, 5, 6, 0] },\n        { text: \"Mon - Fri\", value: [1, 2, 3, 4, 5] },\n      ],\n      value: \"\",\n      events: [],\n      colors: [\"blue\"],\n      names: [\"Appointment\", \"Holiday\", \"PTO\"],\n      appointments: [],\n      now: \"2023-04-20\",\n      selectedDoctorId: null, // id of doctor,\n      doctors: [],\n      doctorObj: {},\n      eventName: \"Patient Name\",\n    };\n  },\n  methods: {\n    chosenDoctor() {\n      this.selectedDoctorId = this.doctorObj.doctorId;\n    },\n    getAppointments() {\n      AppointmentService.getAppointments().then((response) => {\n        this.$store.commit(\"SET_APPOINTMENTS\", response.data);\n        this.appointments = this.$store.state.appointments;\n        this.getEvents();\n      });\n    },\n    getEvents() {\n      for (let i = 0; i < this.appointments.length; i++) {\n        let temp = this.appointments[i];\n        let time = this.appointments[i].appointmentTime;\n        let endTime;\n        if (time.slice(3, 5) === \"30\") {\n          endTime = time.slice(0, 2);\n          parseInt(endTime);\n          endTime++;\n          endTime = endTime.toString() + \":00:00\";\n        } else {\n          endTime = time.slice(0, 2) + \":30:00\";\n        }\n        // Fetch the patient's name using the AppointmentService\n        AppointmentService.getPatientDetails(this.appointments[i].patientId).then((response) => {\n          let patientName = response.data.firstName;\n\n          // Create the event with the patient's name\n          let event = {\n            docId: this.appointments[i].doctorId,\n            name: patientName, // Use the patient's name\n            start: temp.appointmentDate + \"T\" + temp.appointmentTime,\n            end: (temp.appointmentDate += \"T\" + endTime),\n            color: \"blue\",\n            timed: false,\n          };\n\n          this.events.push(event);\n        });\n      }\n    },\n  },\n\n  watch: {\n  filteredAppointments(val) {\n    this.eventName = val[0]?.patientName || \"Patient Name\";\n  },\n},\n  computed: {\n    // This should filter doctor apponintments by id - attached to :events for calendar\n    filteredAppointments() {\n      return this.events.filter((appt) => appt.docId === this.selectedDoctorId).map((appt) => {\n        return {\n          name: appt.name,\n          start: appt.start,\n          end: appt.end,\n          color: appt.color,\n          timed: appt.timed,\n        };\n      })\n    },\n  },\n  created() {\n    this.getAppointments();\n    this.doctors = this.$store.state.doctors;\n  },\n};\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}