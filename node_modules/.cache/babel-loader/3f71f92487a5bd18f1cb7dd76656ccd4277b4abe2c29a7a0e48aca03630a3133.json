{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport doctorService from \"../services/DoctorService\";\nexport default {\n  name: \"DoctorForm\",\n  data: function data() {\n    return {\n      doctor: {\n        //user.id = thisUserIdNumber\n        userId: null,\n        firstName: \"\",\n        lastName: \"\",\n        specialty: \"\",\n        suiteNumber: \"\",\n        costPerHour: \"\",\n        phoneNumber: \"\"\n      },\n      registrationErrors: false,\n      registrationErrorMsg: \"There were problems registering this user.\",\n      valid: false,\n      nameRules: [function (value) {\n        if (value) return true;\n        return \"Name is required.\";\n      }, function (value) {\n        if ((value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"Name must be less than or equal to 50 characters.\";\n      }],\n      emailRules: [function (value) {\n        if (value) return true;\n        return \"E-mail is required.\";\n      }, function (value) {\n        if (/.+@.+\\..+/.test(value) && (value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"E-mail must be valid and less than 50 characters.\";\n      }],\n      passwordRules: [function (value) {\n        if (value) return true;\n        return \"Password is required.\";\n      }, function (value) {\n        if (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$^&*()_-]).{8,20}$/.test(value) && (value === null || value === void 0 ? void 0 : value.length) >= 8 && (value === null || value === void 0 ? void 0 : value.length) <= 20) return true;\n        return \"Password must be at least between 8 and 20 characters, have one digit, one lower case, one upper case, and one special character.\";\n      }],\n      zipcodeRules: [function (value) {\n        if (value) return true;\n        return \"Zipcode is required.\";\n      }, function (value) {\n        if (/^\\d{5}$|^\\d{5}-\\d{4}$/.test(value)) return true;\n        return \"Zipcode must be at least 5 numbers.\";\n      }],\n      phoneNumberRules: [function (value) {\n        if (value) return true;\n        return \"Phone number is required.\";\n      }, function (value) {\n        if (/^[2-9]\\d{2}-\\d{3}-\\d{4}$/.test(value)) return true;\n        return \"Phone number must be in the format 333-444-5555.\";\n      }],\n      dateRules: [function (value) {\n        if (value) return true;\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      function (value) {\n        if (/^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(value)) return true;\n        return \"Date must be in format YYYY-MM-DD.\";\n      }]\n    };\n  },\n  methods: {\n    clearErrors: function clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput: function clearInput() {\n      this.$refs.registerDoctorForm.reset();\n    },\n    registerDoctor: function registerDoctor() {\n      this.doctor.userId = parseInt(this.doctor.userId);\n      doctorService.createDoctor(this.doctor);\n      this.$router.push(\"/\");\n    }\n  },\n  created: function created() {\n    var _this = this;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var results, maxUserId;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              results = doctorService.getMaxId();\n              _context.next = 3;\n              return doctorService.getMaxId();\n            case 3:\n              maxUserId = _context.sent;\n              _this.doctor.userId = maxUserId;\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n};","map":{"version":3,"mappings":";;;;;;AA4FA;AAEA;EACAA;EACAC;IAAA;MACAC;QACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC,YACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,aACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,gBACA;QACA;QAEA;MACA,GACA;QACA,IACA,kEACAC,MACA,IACA,qEACA,oEAEA;QAEA;MACA,EACA;MACAC,eACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,mBACA;QACA;QAEA;MACA,GACA;QACA;QAEA;MACA,EACA;MACAC,YACA;QACA;QAEA;MACA;MACA;MACA;MACA;QACA,IACA,qJACAH,MACA,EAEA;QAEA;MACA;IAEA;EAAA;EAEAI;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACAC;MACA;IACA;EACA;EACAC;IAAA;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cACAC;cAAA;cAAA,OACAF;YAAA;cAAAG;cACA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EACA;AACA","names":["name","data","doctor","userId","firstName","lastName","specialty","suiteNumber","costPerHour","phoneNumber","registrationErrors","registrationErrorMsg","valid","nameRules","emailRules","passwordRules","value","zipcodeRules","phoneNumberRules","dateRules","methods","clearErrors","clearInput","registerDoctor","doctorService","created","results","maxUserId"],"sourceRoot":"src/components","sources":["RegisterDoctorForm.vue"],"sourcesContent":["<template>\n  <v-container fill-height fluid>\n    <v-col\n      align=\"center\"\n      justify=\"center\"\n      fill-height\n      class=\"d-flex justify-center\"\n    >\n      <div id=\"registerDoctor\" class=\"text-center\">\n        <v-card>\n          <v-form\n            class=\"px-6 pb-5 pt-6\"\n            ref=\"registerDoctorForm\"\n            id=\"registerDoctorForm\"\n            v-model=\"valid\"\n            @submit.prevent=\"registerDoctor()\"\n          >\n            <v-img\n              class=\"mx-auto\"\n              src=\"../assets/caduceus-transparent-background-8.png\"\n              max-width=\"50px\"\n              max-height=\"100px\"\n            >\n            </v-img>\n            <h1>Please Enter Doctor's Information</h1>\n            <v-text-field\n              v-model=\"doctor.firstName\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"First name\"\n              prepend-inner-icon=\"mdi-rename\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"doctor.lastName\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Last name\"\n              prepend-inner-icon=\"mdi-rename\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"doctor.specialty\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Specialty\"\n              prepend-inner-icon=\"mdi-account-star\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"doctor.suiteNumber\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Suite Number\"\n              prepend-inner-icon=\"mdi-map-marker\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"doctor.costPerHour\"\n              :rules=\"nameRules\"\n              :counter=\"50\"\n              label=\"Cost Per Hour\"\n              prepend-inner-icon=\"mdi-currency-usd\"\n              required\n            ></v-text-field>\n\n            <v-text-field\n              v-model=\"doctor.phoneNumber\"\n              :rules=\"phoneNumberRules\"\n              :counter=\"50\"\n              label=\"Phone Number\"\n              prepend-inner-icon=\"mdi-phone\"\n              required\n            ></v-text-field>\n\n            <v-btn type=\"submit\" :disabled=\"!valid\"\n              >Submit Doctor Information</v-btn\n            >\n\n            <v-btn @click=\"clearInput\"> Clear Fields </v-btn>\n          </v-form>\n        </v-card>\n      </div>\n    </v-col>\n  </v-container>\n</template>\n\n<script>\nimport doctorService from \"../services/DoctorService\";\n\nexport default {\n  name: \"DoctorForm\",\n  data: () => ({\n    doctor: {\n      //user.id = thisUserIdNumber\n      userId: null,\n      firstName: \"\",\n      lastName: \"\",\n      specialty: \"\",\n      suiteNumber: \"\",\n      costPerHour: \"\",\n      phoneNumber: \"\",\n    },\n    registrationErrors: false,\n    registrationErrorMsg: \"There were problems registering this user.\",\n    valid: false,\n    nameRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Name is required.\";\n      },\n      (value) => {\n        if (value?.length <= 50) return true;\n\n        return \"Name must be less than or equal to 50 characters.\";\n      },\n    ],\n    emailRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"E-mail is required.\";\n      },\n      (value) => {\n        if (/.+@.+\\..+/.test(value) && value?.length <= 50) return true;\n\n        return \"E-mail must be valid and less than 50 characters.\";\n      },\n    ],\n    passwordRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Password is required.\";\n      },\n      (value) => {\n        if (\n          /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$^&*()_-]).{8,20}$/.test(\n            value\n          ) &&\n          value?.length >= 8 &&\n          value?.length <= 20\n        )\n          return true;\n\n        return \"Password must be at least between 8 and 20 characters, have one digit, one lower case, one upper case, and one special character.\";\n      },\n    ],\n    zipcodeRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Zipcode is required.\";\n      },\n      (value) => {\n        if (/^\\d{5}$|^\\d{5}-\\d{4}$/.test(value)) return true;\n\n        return \"Zipcode must be at least 5 numbers.\";\n      },\n    ],\n    phoneNumberRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Phone number is required.\";\n      },\n      (value) => {\n        if (/^[2-9]\\d{2}-\\d{3}-\\d{4}$/.test(value)) return true;\n\n        return \"Phone number must be in the format 333-444-5555.\";\n      },\n    ],\n    dateRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      (value) => {\n        if (\n          /^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(\n            value\n          )\n        )\n          return true;\n\n        return \"Date must be in format YYYY-MM-DD.\";\n      },\n    ],\n  }),\n\n  methods: {\n    clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput() {\n      this.$refs.registerDoctorForm.reset();\n    },\n    registerDoctor() {\n      this.doctor.userId = parseInt(this.doctor.userId);\n      doctorService.createDoctor(this.doctor);\n      this.$router.push(\"/\");\n    },\n  },\n  async created() {\n    let results = doctorService.getMaxId();\n    const maxUserId = await doctorService.getMaxId();\n    this.doctor.userId = maxUserId;\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}