{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport PatientService from \"../services/PatientService\";\nexport default {\n  name: \"UpdatePatientForm\",\n  data: function data() {\n    return {\n      patient: {\n        //user.id = thisUserIdNumber\n        patientId: 0,\n        userId: 0,\n        firstName: \"\",\n        lastName: \"\",\n        address: \"\",\n        city: \"\",\n        states: \"\",\n        zipcode: \"\",\n        emailAddress: \"\",\n        patientNumber: \"\",\n        birthdate: \"\"\n      },\n      registrationErrors: false,\n      registrationErrorMsg: \"There were problems registering this user.\",\n      valid: false,\n      nameRules: [function (value) {\n        if (value) return true;\n        return \"Name is required.\";\n      }, function (value) {\n        if ((value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"Name must be less than or equal to 50 characters.\";\n      }],\n      emailRules: [function (value) {\n        if (value) return true;\n        return \"E-mail is required.\";\n      }, function (value) {\n        if (/.+@.+\\..+/.test(value) && (value === null || value === void 0 ? void 0 : value.length) <= 50) return true;\n        return \"E-mail must be valid and less than 50 characters.\";\n      }],\n      zipcodeRules: [function (value) {\n        if (value) return true;\n        return \"Zipcode is required.\";\n      }, function (value) {\n        if (/^\\d{5}$|^\\d{5}-\\d{4}$/.test(value)) return true;\n        return \"Zipcode must be at least 5 numbers.\";\n      }],\n      phoneNumberRules: [function (value) {\n        if (value) return true;\n        return \"Phone number is required.\";\n      }, function (value) {\n        if (/^[2-9]\\d{2}-\\d{3}-\\d{4}$/.test(value)) return true;\n        return \"Phone number must be in the format 333-444-5555.\";\n      }],\n      dateRules: [function (value) {\n        if (value) return true;\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      function (value) {\n        if (/^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(value)) return true;\n        return \"Date must be in format YYYY-MM-DD.\";\n      }]\n    };\n  },\n  methods: {\n    clearErrors: function clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = \"There were problems registering this user.\";\n    },\n    clearInput: function clearInput() {\n      this.$refs.updatePatientForm.reset();\n    },\n    updatePatient: function updatePatient() {\n      var _this = this;\n      PatientService.updatePatient(this.patient.patientId, this.patient).then(function (response) {\n        if (response.status === 200) {\n          _this.$router.push(\"/\");\n        }\n      });\n    }\n  },\n  created: function created() {\n    this.patient.userId = this.$store.state.patientToUpdate.userId;\n    this.patient.patientId = this.$store.state.patientToUpdate.patientId;\n    this.patient = this.$store.state.patientToUpdate;\n    // console.log(\"start\");\n    // console.log(this.$store.state.doctorToUpdate);\n    // console.log(\"end\");\n  }\n};","map":{"version":3,"names":["PatientService","name","data","patient","patientId","userId","firstName","lastName","address","city","states","zipcode","emailAddress","patientNumber","birthdate","registrationErrors","registrationErrorMsg","valid","nameRules","value","length","emailRules","test","zipcodeRules","phoneNumberRules","dateRules","methods","clearErrors","clearInput","$refs","updatePatientForm","reset","updatePatient","_this","then","response","status","$router","push","created","$store","state","patientToUpdate"],"sources":["src/components/UpdatePatientForm.vue"],"sourcesContent":["<template>\n    <v-container fill-height fluid>\n      <v-col\n        align=\"center\"\n        justify=\"center\"\n        fill-height\n        class=\"d-flex justify-center\"\n      >\n        <v-card>\n          <div id=\"updatePatient\" class=\"text-center\">\n            <v-form\n              class=\"px-6 pb-5 pt-6\"\n              ref=\"updatePatientForm\"\n              id=\"userId\"\n              v-model=\"valid\"\n              @submit.prevent=\"updatePatient()\"\n            >\n              <v-img\n                class=\"mx-auto\"\n                src=\"../assets/caduceus-transparent-background-8.png\"\n                max-width=\"50px\"\n                max-height=\"100px\"\n              >\n              </v-img>\n              <h1>Enter Updated Information</h1>\n              <v-text-field\n                v-model=\"patient.firstName\"\n                :rules=\"nameRules\"\n                :counter=\"50\"\n                label=\"First name\"\n                prepend-inner-icon=\"mdi-rename\"\n                required\n              ></v-text-field>\n              <v-text-field\n                v-model=\"patient.lastName\"\n                :rules=\"nameRules\"\n                :counter=\"50\"\n                label=\"Last name\"\n                prepend-inner-icon=\"mdi-rename\"\n                required\n              ></v-text-field>\n              <v-text-field\n                  v-model=\"patient.emailAddress\"\n                  :rules=\"emailRules\"\n                  :counter=\"50\"\n                  label=\"E-mail\"\n                  prepend-inner-icon=\"mdi-email\"\n                  required\n              ></v-text-field>\n  \n              <v-text-field\n                  v-model=\"patient.address\"\n                  :rules=\"nameRules\"\n                  :counter=\"100\"\n                  label=\"Address\"\n                  prepend-inner-icon=\"mdi-map-marker\"\n                  required\n              ></v-text-field>\n  \n              <v-text-field\n                  v-model=\"patient.city\"\n                  :rules=\"nameRules\"\n                  :counter=\"50\"\n                  label=\"City\"\n                  prepend-inner-icon=\"mdi-city\"\n                  required\n              ></v-text-field>\n  \n              <v-text-field\n                  v-model=\"patient.states\"\n                  :rules=\"nameRules\"\n                  :counter=\"50\"\n                  label=\"State\"\n                  prepend-inner-icon=\"mdi-map-marker\"\n                  required\n              ></v-text-field>\n  \n              <v-text-field\n                  v-model=\"patient.zipcode\"\n                  :rules=\"zipcodeRules\"\n                  :counter=\"50\"\n                  label=\"Zipcode\"\n                  prepend-inner-icon=\"mdi-map-marker\"\n                  required\n              ></v-text-field>\n  \n              <v-text-field\n                  v-model=\"patient.patientNumber\"\n                  :rules=\"phoneNumberRules\"\n                  :counter=\"50\"\n                  label=\"Phone Number\"\n                  prepend-inner-icon=\"mdi-phone\"\n                  required\n              ></v-text-field>\n  \n              <v-text-field\n                  v-model=\"patient.birthdate\"\n                  :rules=\"dateRules\"\n                  :counter=\"100\"\n                  label=\"Birth date\"\n                  prepend-inner-icon=\"mdi-cake\"\n                  required\n              ></v-text-field>\n  \n              <v-btn type=\"submit\" :disabled=\"!valid\"\n                >Submit Updated Information</v-btn\n              >\n  \n              <v-btn @click=\"clearInput\"> Clear Fields </v-btn>\n            </v-form>\n          </div>\n        </v-card>\n      </v-col>\n    </v-container>\n  </template>\n  \n  <script>\n  \n  import PatientService from \"../services/PatientService\";\n  \n  export default {\n    name: \"UpdatePatientForm\",\n    data: () => ({\n      patient: {\n        //user.id = thisUserIdNumber\n        patientId: 0,\n        userId: 0,\n        firstName: \"\",\n        lastName: \"\",\n        address: \"\",\n        city: \"\",\n        states: \"\",\n        zipcode: \"\",\n        emailAddress: \"\",\n        patientNumber: \"\",\n        birthdate: \"\",\n      },\n      registrationErrors: false,\n      registrationErrorMsg: \"There were problems registering this user.\",\n      valid: false,\n      nameRules: [\n        (value) => {\n          if (value) return true;\n  \n          return \"Name is required.\";\n        },\n        (value) => {\n          if (value?.length <= 50) return true;\n  \n          return \"Name must be less than or equal to 50 characters.\";\n        },\n      ],\n      emailRules: [\n        (value) => {\n          if (value) return true;\n  \n          return \"E-mail is required.\";\n        },\n        (value) => {\n          if (/.+@.+\\..+/.test(value) && value?.length <= 50) return true;\n  \n          return \"E-mail must be valid and less than 50 characters.\";\n        },\n      ],\n      zipcodeRules: [\n        (value) => {\n          if (value) return true;\n  \n          return \"Zipcode is required.\";\n        },\n        (value) => {\n          if (/^\\d{5}$|^\\d{5}-\\d{4}$/.test(value)) return true;\n  \n          return \"Zipcode must be at least 5 numbers.\";\n        },\n      ],\n      phoneNumberRules: [\n        (value) => {\n          if (value) return true;\n  \n          return \"Phone number is required.\";\n        },\n        (value) => {\n          if (/^[2-9]\\d{2}-\\d{3}-\\d{4}$/.test(value)) return true;\n  \n          return \"Phone number must be in the format 333-444-5555.\";\n        },\n      ],\n      dateRules: [\n        (value) => {\n          if (value) return true;\n  \n          return \"Date is required.\";\n        },\n        // eslint-disable-next-line\n        /* eslint-disable */\n        (value) => {\n          if (\n              /^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(\n                  value\n              )\n          )\n            return true;\n  \n          return \"Date must be in format YYYY-MM-DD.\";\n        },\n      ],\n    }),\n    methods: {\n      clearErrors() {\n        this.registrationErrors = false;\n        this.registrationErrorMsg = \"There were problems registering this user.\";\n      },\n      clearInput() {\n        this.$refs.updatePatientForm.reset();\n      },\n      updatePatient() {\n        PatientService.updatePatient(this.patient.patientId, this.patient).then(\n          (response) => {\n            if (response.status === 200) {\n              this.$router.push(\"/\");\n            }\n          }\n        );\n      },\n    },\n    created() {\n      this.patient.userId = this.$store.state.patientToUpdate.userId;\n      this.patient.patientId = this.$store.state.patientToUpdate.patientId;\n      this.patient = this.$store.state.patientToUpdate;\n      // console.log(\"start\");\n      // console.log(this.$store.state.doctorToUpdate);\n      // console.log(\"end\");\n    },\n  };\n  </script>"],"mappings":";;;AAsHA,OAAAA,cAAA;AAEA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IAAA;MACAC,OAAA;QACA;QACAC,SAAA;QACAC,MAAA;QACAC,SAAA;QACAC,QAAA;QACAC,OAAA;QACAC,IAAA;QACAC,MAAA;QACAC,OAAA;QACAC,YAAA;QACAC,aAAA;QACAC,SAAA;MACA;MACAC,kBAAA;MACAC,oBAAA;MACAC,KAAA;MACAC,SAAA,GACA,UAAAC,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,KAAAA,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAAC,MAAA;QAEA;MACA,EACA;MACAC,UAAA,GACA,UAAAF,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,gBAAAG,IAAA,CAAAH,KAAA,MAAAA,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAAC,MAAA;QAEA;MACA,EACA;MACAG,YAAA,GACA,UAAAJ,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,4BAAAG,IAAA,CAAAH,KAAA;QAEA;MACA,EACA;MACAK,gBAAA,GACA,UAAAL,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,+BAAAG,IAAA,CAAAH,KAAA;QAEA;MACA,EACA;MACAM,SAAA,GACA,UAAAN,KAAA;QACA,IAAAA,KAAA;QAEA;MACA;MACA;MACA;MACA,UAAAA,KAAA;QACA,IACA,gJAAAG,IAAA,CACAH,KACA,GAEA;QAEA;MACA;IAEA;EAAA;EACAO,OAAA;IACAC,WAAA,WAAAA,YAAA;MACA,KAAAZ,kBAAA;MACA,KAAAC,oBAAA;IACA;IACAY,UAAA,WAAAA,WAAA;MACA,KAAAC,KAAA,CAAAC,iBAAA,CAAAC,KAAA;IACA;IACAC,aAAA,WAAAA,cAAA;MAAA,IAAAC,KAAA;MACAjC,cAAA,CAAAgC,aAAA,MAAA7B,OAAA,CAAAC,SAAA,OAAAD,OAAA,EAAA+B,IAAA,CACA,UAAAC,QAAA;QACA,IAAAA,QAAA,CAAAC,MAAA;UACAH,KAAA,CAAAI,OAAA,CAAAC,IAAA;QACA;MACA,CACA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAApC,OAAA,CAAAE,MAAA,QAAAmC,MAAA,CAAAC,KAAA,CAAAC,eAAA,CAAArC,MAAA;IACA,KAAAF,OAAA,CAAAC,SAAA,QAAAoC,MAAA,CAAAC,KAAA,CAAAC,eAAA,CAAAtC,SAAA;IACA,KAAAD,OAAA,QAAAqC,MAAA,CAAAC,KAAA,CAAAC,eAAA;IACA;IACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}