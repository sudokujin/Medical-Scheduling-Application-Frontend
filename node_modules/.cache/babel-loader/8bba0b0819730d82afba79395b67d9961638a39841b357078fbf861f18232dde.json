{"ast":null,"code":"import _slicedToArray from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/guild/workspace/MedicalSchedulerApp/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport Vue from 'vue';\nimport { consoleError } from '../../util/console';\nimport { isCssColor } from '../../util/colorUtils';\nexport default Vue.extend({\n  name: 'colorable',\n  props: {\n    color: String\n  },\n  methods: {\n    setBackgroundColor: function setBackgroundColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n      if (typeof data[\"class\"] === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n      if (isCssColor(color)) {\n        data.style = _objectSpread(_objectSpread({}, data.style), {}, {\n          'background-color': \"\".concat(color),\n          'border-color': \"\".concat(color)\n        });\n      } else if (color) {\n        data[\"class\"] = _objectSpread(_objectSpread({}, data[\"class\"]), {}, _defineProperty({}, color, true));\n      }\n      return data;\n    },\n    setTextColor: function setTextColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n      if (typeof data[\"class\"] === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n      if (isCssColor(color)) {\n        data.style = _objectSpread(_objectSpread({}, data.style), {}, {\n          color: \"\".concat(color),\n          'caret-color': \"\".concat(color)\n        });\n      } else if (color) {\n        var _color$toString$trim$ = color.toString().trim().split(' ', 2),\n          _color$toString$trim$2 = _slicedToArray(_color$toString$trim$, 2),\n          colorName = _color$toString$trim$2[0],\n          colorModifier = _color$toString$trim$2[1];\n        data[\"class\"] = _objectSpread(_objectSpread({}, data[\"class\"]), {}, _defineProperty({}, colorName + '--text', true));\n        if (colorModifier) {\n          data[\"class\"]['text--' + colorModifier] = true;\n        }\n      }\n      return data;\n    }\n  }\n});","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,eAAeF,GAAG,CAACG,MAAJ,CAAW;EACxBC,IAAI,EAAE,WADkB;EAGxBC,KAAK,EAAE;IACLC,KAAK,EAAEC;EADF,CAHiB;EAOxBC,OAAO,EAAE;IACPC,kBAAkB,8BAAEH,KAAF,EAA8C;MAAA,IAApBI,2EAAkB,EAA5C;MAChB,IAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;QAClC;QACAV,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;QACA,OAAOS,IAAP;MACD;MACD,IAAI,OAAOA,IAAI,SAAX,KAAsB,QAA1B,EAAoC;QAClC;QACAT,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;QACA,OAAOS,IAAP;MACD;MACD,IAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;QACrBI,IAAI,CAACC,KAAL,mCACKD,IAAI,CAACC,KADG;UAEX,8BAAuBL,KAAK,CAFjB;UAGX,0BAAmBA,KAAK;QAAA,EAH1B;MAKD,CAND,MAMO,IAAIA,KAAJ,EAAW;QAChBI,IAAI,SAAJ,mCACKA,IAAI,SADI,2BAEVJ,KAAD,EAAS,MAFX;MAID;MAED,OAAOI,IAAP;IACD,CA5BM;IA8BPE,YAAY,wBAAEN,KAAF,EAA8C;MAAA,IAApBI,2EAAkB,EAA5C;MACV,IAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;QAClC;QACAV,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;QACA,OAAOS,IAAP;MACD;MACD,IAAI,OAAOA,IAAI,SAAX,KAAsB,QAA1B,EAAoC;QAClC;QACAT,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;QACA,OAAOS,IAAP;MACD;MACD,IAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;QACrBI,IAAI,CAACC,KAAL,mCACKD,IAAI,CAACC,KADG;UAEXL,KAAK,YAAKA,KAAK,CAFJ;UAGX,yBAAkBA,KAAK;QAAA,EAHzB;MAKD,CAND,MAMO,IAAIA,KAAJ,EAAW;QAChB,4BAAmCA,KAAK,CAACO,QAAN,GAAiBC,IAAjB,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,CAAnC;UAAA;UAAOC,SAAD;UAAYC,aAAZ;QACNP,IAAI,SAAJ,mCACKA,IAAI,SADI,2BAEVM,SAAS,GAAG,QAAb,EAAwB,MAF1B;QAIA,IAAIC,aAAJ,EAAmB;UACjBP,IAAI,SAAJ,CAAW,WAAWO,aAAtB,IAAuC,IAAvC;QACD;MACF;MACD,OAAOP,IAAP;IACD;EA5DM;AAPe,CAAX,CAAf","names":["Vue","consoleError","isCssColor","extend","name","props","color","String","methods","setBackgroundColor","data","style","setTextColor","toString","trim","split","colorName","colorModifier"],"sourceRoot":"","sources":["../../../src/mixins/colorable/index.ts"],"sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\nimport { consoleError } from '../../util/console'\nimport { isCssColor } from '../../util/colorUtils'\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String,\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'background-color': `${color}`,\n          'border-color': `${color}`,\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true,\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          color: `${color}`,\n          'caret-color': `${color}`,\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true,\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}