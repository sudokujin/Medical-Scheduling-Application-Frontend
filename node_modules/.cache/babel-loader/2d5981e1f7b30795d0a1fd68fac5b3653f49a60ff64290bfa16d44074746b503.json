{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport Navbar from \"../components/Navbar.vue\";\nimport AppointmentService from \"../services/AppointmentService\";\nimport PatientDetailsModal from \"@/components/PatientDetailsModal.vue\"; // Adjust the path as needed\n\nexport default {\n  name: \"calendar\",\n  components: {\n    Navbar: Navbar,\n    PatientDetailsModal: PatientDetailsModal\n  },\n  data: function data() {\n    return {\n      type: \"month\",\n      types: [\"month\", \"week\", \"day\"],\n      mode: \"stack\",\n      weekday: [0, 1, 2, 3, 4, 5, 6],\n      weekdays: [{\n        text: \"Sun - Sat\",\n        value: [0, 1, 2, 3, 4, 5, 6]\n      }, {\n        text: \"Mon - Sun\",\n        value: [1, 2, 3, 4, 5, 6, 0]\n      }, {\n        text: \"Mon - Fri\",\n        value: [1, 2, 3, 4, 5]\n      }],\n      value: \"\",\n      events: [],\n      colors: [\"blue\"],\n      names: [\"Appointment\", \"Holiday\", \"PTO\"],\n      appointments: [],\n      now: \"2023-04-20\",\n      selectedDoctorId: null,\n      // id of doctor,\n      doctors: [],\n      doctorObj: {},\n      patientDetailsModal: false,\n      selectedPatientDetails: {} // ***** or null ******\n    };\n  },\n\n  methods: {\n    chosenDoctor: function chosenDoctor() {\n      this.selectedDoctorId = this.doctorObj.doctorId;\n    },\n    showAppointmentDetails: function showAppointmentDetails(event) {\n      var _this = this;\n      var appointmentId = event.id; // You should adjust this to get the appointment ID from your event data.\n\n      // Make an API request to retrieve patient details based on appointmentId\n      AppointmentService.getAppointmentDetails(appointmentId).then(function (response) {\n        // Handle the response and display patient details in a modal or pop-up\n        _this.showPatientDetailsModal(response.data);\n      })[\"catch\"](function (error) {\n        console.error('Error fetching appointment details:', error);\n      });\n    },\n    showPatientDetailsModal: function showPatientDetailsModal(patientDetails) {\n      this.selectedPatientDetails = patientDetails;\n      this.patientDetailsModal = true;\n    },\n    closePatientDetailsModal: function closePatientDetailsModal() {\n      this.patientDetailsModal = false;\n    },\n    getAppointments: function getAppointments() {\n      var _this2 = this;\n      AppointmentService.getAppointments().then(function (response) {\n        _this2.$store.commit(\"SET_APPOINTMENTS\", response.data);\n        _this2.appointments = _this2.$store.state.appointments;\n        _this2.getEvents();\n      });\n    },\n    getEvents: function getEvents() {\n      for (var i = 0; i < this.appointments.length; i++) {\n        var temp = this.appointments[i];\n        var time = this.appointments[i].appointmentTime;\n        var endTime = void 0;\n        if (time.slice(3, 5) === \"30\") {\n          endTime = time.slice(0, 2);\n          parseInt(endTime);\n          endTime++;\n          endTime = endTime.toString() + \":00:00\";\n        } else {\n          endTime = time.slice(0, 2) + \":30:00\";\n        }\n        var event = {\n          docId: this.appointments[i].doctorId,\n          name: \"Appointment\",\n          start: temp.appointmentDate + \"T\" + temp.appointmentTime,\n          end: temp.appointmentDate += \"T\" + endTime,\n          color: \"blue\",\n          timed: false\n        };\n        this.events.push(event);\n      }\n    }\n  },\n  computed: {\n    // This should filter doctor apponintments by id - attached to :events for calendar\n    filteredAppointments: function filteredAppointments() {\n      var _this3 = this;\n      return this.events.filter(function (appt) {\n        return appt.docId === _this3.selectedDoctorId;\n      });\n    }\n  },\n  created: function created() {\n    this.getAppointments();\n    this.doctors = this.$store.state.doctors;\n  }\n};","map":{"version":3,"names":["Navbar","AppointmentService","PatientDetailsModal","name","components","data","type","types","mode","weekday","weekdays","text","value","events","colors","names","appointments","now","selectedDoctorId","doctors","doctorObj","patientDetailsModal","selectedPatientDetails","methods","chosenDoctor","doctorId","showAppointmentDetails","event","_this","appointmentId","id","getAppointmentDetails","then","response","showPatientDetailsModal","error","console","patientDetails","closePatientDetailsModal","getAppointments","_this2","$store","commit","state","getEvents","i","length","temp","time","appointmentTime","endTime","slice","parseInt","toString","docId","start","appointmentDate","end","color","timed","push","computed","filteredAppointments","_this3","filter","appt","created"],"sources":["src/components/Calendar.vue"],"sourcesContent":["<template>\n  <v-container>\n    <navbar />\n    <v-divider></v-divider>\n    <h1>Weekly Calendar</h1>\n    <v-spacer></v-spacer>\n    <div>\n      <v-sheet tile height=\"54\" class=\"d-flex\">\n        <v-btn icon class=\"ma-2\" @click=\"$refs.calendar.prev()\">\n          <v-icon>mdi-chevron-left</v-icon>\n        </v-btn>\n        <v-select\n          v-model=\"type\"\n          :items=\"types\"\n          dense\n          outlined\n          hide-details\n          class=\"ma-2\"\n          label=\"type\"\n        ></v-select>\n        <v-select\n          :items=\"this.$store.state.doctors\"\n          v-model=\"doctorObj\"\n          item-text=\"firstName\"\n          item-value=\"doctorId\"\n          return-object\n          dense\n          outlined\n          hide-details\n          class=\"ma-2\"\n          label=\"doctors\"\n          @change=\"chosenDoctor\"\n        ></v-select>\n        <v-select\n          v-model=\"weekday\"\n          :items=\"weekdays\"\n          dense\n          outlined\n          hide-details\n          label=\"weekdays\"\n          class=\"ma-2\"\n        ></v-select>\n        <v-spacer></v-spacer>\n        <v-btn icon class=\"ma-2\" @click=\"$refs.calendar.next()\">\n          <v-icon>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-sheet>\n      <v-sheet height=\"600\">\n        <v-calendar\n          ref=\"calendar\"\n          v-model=\"value\"\n          :weekdays=\"weekday\"\n          :type=\"type\"\n          :events=\"filteredAppointments\"\n          :now=\"now\"\n          @event-click=\"showAppointment\"\n        ></v-calendar>\n      </v-sheet>\n    </div>\n    <patient-details-modal\n      :modal=\"patientDetailsModal\"\n      :patientDetails=\"selectedPatientDetails\"\n      @close-modal=\"closePatientDetailsModal\"\n    ></patient-details-modal>\n  </v-container>\n</template>\n<script>\nimport Navbar from \"../components/Navbar.vue\";\nimport AppointmentService from \"../services/AppointmentService\";\nimport PatientDetailsModal from \"@/components/PatientDetailsModal.vue\"; // Adjust the path as needed\n\n\nexport default {\n  name: \"calendar\",\n  components: {\n    Navbar,\n    PatientDetailsModal,\n  },\n  data() {\n    return {\n      type: \"month\",\n      types: [\"month\", \"week\", \"day\"],\n      mode: \"stack\",\n      weekday: [0, 1, 2, 3, 4, 5, 6],\n      weekdays: [\n        { text: \"Sun - Sat\", value: [0, 1, 2, 3, 4, 5, 6] },\n        { text: \"Mon - Sun\", value: [1, 2, 3, 4, 5, 6, 0] },\n        { text: \"Mon - Fri\", value: [1, 2, 3, 4, 5] },\n      ],\n      value: \"\",\n      events: [],\n      colors: [\"blue\"],\n      names: [\"Appointment\", \"Holiday\", \"PTO\"],\n      appointments: [],\n      now: \"2023-04-20\",\n      selectedDoctorId: null, // id of doctor,\n      doctors: [],\n      doctorObj: {},\n\n      patientDetailsModal: false,\n      selectedPatientDetails: {},  // ***** or null ******\n    };\n  },\n  methods: {\n    chosenDoctor() {\n      this.selectedDoctorId = this.doctorObj.doctorId;\n    },\n    showAppointmentDetails(event) {\n      const appointmentId = event.id; // You should adjust this to get the appointment ID from your event data.\n      \n      // Make an API request to retrieve patient details based on appointmentId\n      AppointmentService.getAppointmentDetails(appointmentId)\n        .then((response) => {\n          // Handle the response and display patient details in a modal or pop-up\n          this.showPatientDetailsModal(response.data);\n        })\n        .catch((error) => {\n          console.error('Error fetching appointment details:', error);\n        });\n    },\n    showPatientDetailsModal(patientDetails) {\n        this.selectedPatientDetails = patientDetails;\n        this.patientDetailsModal = true;\n      },\n    closePatientDetailsModal() {\n        this.patientDetailsModal = false;\n      },\n    getAppointments() {\n      AppointmentService.getAppointments().then((response) => {\n        this.$store.commit(\"SET_APPOINTMENTS\", response.data);\n        this.appointments = this.$store.state.appointments;\n        this.getEvents();\n      });\n    },\n    getEvents() {\n      for (let i = 0; i < this.appointments.length; i++) {\n        let temp = this.appointments[i];\n        let time = this.appointments[i].appointmentTime;\n        let endTime;\n        if (time.slice(3, 5) === \"30\") {\n          endTime = time.slice(0, 2);\n          parseInt(endTime);\n          endTime++;\n          endTime = endTime.toString() + \":00:00\";\n        } else {\n          endTime = time.slice(0, 2) + \":30:00\";\n        }\n        let event = {\n          docId: this.appointments[i].doctorId,\n          name: \"Appointment\",\n          start: temp.appointmentDate + \"T\" + temp.appointmentTime,\n          end: (temp.appointmentDate += \"T\" + endTime),\n          color: \"blue\",\n          timed: false,\n        };\n        this.events.push(event);\n      }\n    },\n  },\n  computed: {\n    // This should filter doctor apponintments by id - attached to :events for calendar\n    filteredAppointments() {\n      return this.events.filter((appt) => appt.docId === this.selectedDoctorId);\n    },\n  },\n  created() {\n    this.getAppointments();\n    this.doctors = this.$store.state.doctors;\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}