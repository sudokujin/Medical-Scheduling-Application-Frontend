{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kwon/Desktop/repo/Medical-Scheduling-Application-Frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/kwon/Desktop/repo/Medical-Scheduling-Application-Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport AppointmentService from \"../services/AppointmentService\";\nimport Navbar from \"../components/Navbar.vue\";\nimport DoctorTimeService from \"../services/DoctorTimeService\";\nexport default {\n  name: \"AppointmentForm\",\n  components: {\n    Navbar: Navbar\n  },\n  data: function data() {\n    return {\n      appointment: {\n        patientId: null,\n        doctorId: null,\n        appointmentDuration: 30,\n        description: \"\",\n        appointmentDate: \"\",\n        appointmentTime: \"\"\n      },\n      timeslots: [],\n      valid: false,\n      selected: null,\n      dateSelected: null,\n      dateRules: [function (value) {\n        if (value) return true;\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      function (value) {\n        if (/^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(value)) return true;\n        return \"Date must be in the format YYYY-MM-DD.\";\n      }],\n      timeRules: [function (value) {\n        if (value) return true;\n        return \"Time is required.\";\n      }, function (value) {\n        if (/(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])/.test(value)) return true;\n        return \"Time must be in the format 00:00:00.\";\n      }]\n    };\n  },\n  methods: {\n    clearInput: function clearInput() {\n      this.$refs.appointmentForm.reset();\n    },\n    createAppointment: function createAppointment() {\n      var _this = this;\n      this.appointment.patientId = this.$store.state.patientId;\n      AppointmentService.createAppointment(this.appointment).then(function (response) {\n        if (response.status === 201) {\n          _this.commitAppointments();\n        }\n      });\n      this.$router.push(\"/\");\n    },\n    getTimeSlotByIdAndDate: function getTimeSlotByIdAndDate(id, date) {\n      var _this2 = this;\n      AppointmentService.getTimeArray(id, date).then(function (response) {\n        _this2.timeSlots = response.data;\n      });\n      // service call here to pull data from doctor based on id this.selected and date selected this.dateSelected\n      // will i need to add a list of dates as well as a dropdown menu?\n    },\n    commitAppointments: function commitAppointments() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this3.$store.commit(\"SET_CURRENT_APPOINTMENTS\", AppointmentService.getAppointmentByPatientId(_this3.$store.state.patientId));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    chosenDoctor: function chosenDoctor() {\n      var _this4 = this;\n      this.appointment.doctorId = this.doctorObj.doctorId;\n      console.log('id', this.doctorObj.doctorId);\n      DoctorTimeService.getTimeArray(this.appointment.doctorId, this.appointment.appointmentDate).then(function (response) {\n        _this4.timeslots = response.data;\n      });\n    }\n  },\n  created: function created() {\n    var _this5 = this;\n    AppointmentService.getTimeArray(this.appointment.doctorId, this.appointment.appointmentDate).then(function (response) {\n      _this5.timeSlots = response.data;\n    });\n  }\n};","map":{"version":3,"names":["AppointmentService","Navbar","DoctorTimeService","name","components","data","appointment","patientId","doctorId","appointmentDuration","description","appointmentDate","appointmentTime","timeslots","valid","selected","dateSelected","dateRules","value","test","timeRules","methods","clearInput","$refs","appointmentForm","reset","createAppointment","_this","$store","state","then","response","status","commitAppointments","$router","push","getTimeSlotByIdAndDate","id","date","_this2","getTimeArray","timeSlots","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","commit","getAppointmentByPatientId","stop","chosenDoctor","_this4","doctorObj","console","log","created","_this5"],"sources":["src/components/AppointmentForm.vue"],"sourcesContent":["/* eslint-disable */\n<template>\n  <v-container fill-height fluid>\n    <navbar />\n    <v-col\n        align=\"center\"\n        justify=\"center\"\n        fill-height\n        class=\"d-flex justify-center\"\n    >\n      <div id=\"appointment\" class=\"text-center\">\n        <v-card>\n          <v-form\n              class=\"px-6 pb-5 pt-6\"\n              ref=\"appointmentForm\"\n              id=\"appointmentForm\"\n              v-model=\"valid\"\n              @submit.prevent=\"createAppointment\"\n          >\n            <v-img class='mx-auto' src='../assets/caduceus-transparent-background-8.png'\n                   max-width='50px'\n                   max-height='100px'\n            > </v-img>\n            <h1>Please Enter Appointment Information</h1>\n            <v-text-field\n                v-model=\"appointment.appointmentDate\"\n                :counter=\"100\"\n                label=\"Appointment Date\"\n                prepend-inner-icon=\"mdi-cake\"\n                required\n            ></v-text-field>\n            <v-select\n                :items=\"this.$store.state.doctors\"\n                v-model=\"doctorObj\"\n                item-text=\"firstName\"\n                item-value=\"id\"\n                return-object\n                dense\n                outlined\n                hide-details\n                class=\"ma-2 pb-6\"\n                label=\"doctors\"\n                @change=\"chosenDoctor\"\n            ></v-select>\n\n            <v-select\n                :items=\"timeslots\"\n                v-model=\"appointment.appointmentTime\"\n                item-text=\"\"\n                item-value=\"id\"\n                return-object\n                dense\n                outlined\n                hide-details\n                class=\"ma-2 pb-6\"\n                label=\"timeslots\"\n            ></v-select>\n            <v-text-field\n                v-model=\"appointment.description\"\n                :counter=\"100\"\n                label=\"Description\"\n                required\n            >\n            </v-text-field>\n\n            <v-btn type=\"submit\" :disabled=\"!valid\">Create Appointment</v-btn>\n            <v-btn @click=\"clearInput\"> Clear Fields </v-btn>\n          </v-form>\n        </v-card>\n      </div>\n    </v-col>\n  </v-container>\n</template>\n\n<script>\nimport AppointmentService from \"../services/AppointmentService\";\nimport Navbar from \"../components/Navbar.vue\";\nimport DoctorTimeService from \"../services/DoctorTimeService\";\n\nexport default {\n  name: \"AppointmentForm\",\n  components: {\n    Navbar,\n  },\n  data: () => ({\n    appointment: {\n      patientId: null,\n      doctorId: null,\n      appointmentDuration: 30,\n      description: \"\",\n      appointmentDate: \"\",\n      appointmentTime: \"\",\n    },\n    timeslots: [],\n    valid: false,\n    selected: null,\n    dateSelected: null,\n    dateRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Date is required.\";\n      },\n      // eslint-disable-next-line\n      /* eslint-disable */\n      (value) => {\n        if (\n            /^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$/.test(\n                value\n            )\n        )\n          return true;\n\n        return \"Date must be in the format YYYY-MM-DD.\";\n      },\n    ],\n    timeRules: [\n      (value) => {\n        if (value) return true;\n\n        return \"Time is required.\";\n      },\n      (value) => {\n        if (/(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])/.test(value))\n          return true;\n\n        return \"Time must be in the format 00:00:00.\";\n      },\n    ],\n  }),\n  methods: {\n    clearInput() {\n      this.$refs.appointmentForm.reset();\n    },\n    createAppointment() {\n      this.appointment.patientId = this.$store.state.patientId;\n      AppointmentService.createAppointment(this.appointment).then(\n          (response) => {\n            if (response.status === 201) {\n            this.commitAppointments()\n            }\n          }\n      );\n      this.$router.push(\"/\");\n    },\n    getTimeSlotByIdAndDate(id, date) {\n      AppointmentService.getTimeArray(id, date).then((response) => {\n        this.timeSlots = response.data;\n      });\n      // service call here to pull data from doctor based on id this.selected and date selected this.dateSelected\n      // will i need to add a list of dates as well as a dropdown menu?\n    },\n    async commitAppointments() {\n      await this.$store.commit(\n          \"SET_CURRENT_APPOINTMENTS\",\n          AppointmentService.getAppointmentByPatientId(this.$store.state.patientId)\n      );\n    },\n    chosenDoctor() {\n      this.appointment.doctorId = this.doctorObj.doctorId;\n      console.log('id', this.doctorObj.doctorId);\n      DoctorTimeService.getTimeArray(\n          this.appointment.doctorId,\n          this.appointment.appointmentDate\n      ).then((response) => {\n        this.timeslots = response.data;\n      });\n    },\n  },\n  created() {\n\n    AppointmentService.getTimeArray(this.appointment.doctorId, this.appointment.appointmentDate).then(response => {\n      this.timeSlots = response.data;\n    });\n  },\n};\n</script>"],"mappings":";;;;;AA2EA,OAAAA,kBAAA;AACA,OAAAC,MAAA;AACA,OAAAC,iBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,MAAA,EAAAA;EACA;EACAI,IAAA,WAAAA,KAAA;IAAA;MACAC,WAAA;QACAC,SAAA;QACAC,QAAA;QACAC,mBAAA;QACAC,WAAA;QACAC,eAAA;QACAC,eAAA;MACA;MACAC,SAAA;MACAC,KAAA;MACAC,QAAA;MACAC,YAAA;MACAC,SAAA,GACA,UAAAC,KAAA;QACA,IAAAA,KAAA;QAEA;MACA;MACA;MACA;MACA,UAAAA,KAAA;QACA,IACA,gJAAAC,IAAA,CACAD,KACA,GAEA;QAEA;MACA,EACA;MACAE,SAAA,GACA,UAAAF,KAAA;QACA,IAAAA,KAAA;QAEA;MACA,GACA,UAAAA,KAAA;QACA,0DAAAC,IAAA,CAAAD,KAAA,GACA;QAEA;MACA;IAEA;EAAA;EACAG,OAAA;IACAC,UAAA,WAAAA,WAAA;MACA,KAAAC,KAAA,CAAAC,eAAA,CAAAC,KAAA;IACA;IACAC,iBAAA,WAAAA,kBAAA;MAAA,IAAAC,KAAA;MACA,KAAArB,WAAA,CAAAC,SAAA,QAAAqB,MAAA,CAAAC,KAAA,CAAAtB,SAAA;MACAP,kBAAA,CAAA0B,iBAAA,MAAApB,WAAA,EAAAwB,IAAA,CACA,UAAAC,QAAA;QACA,IAAAA,QAAA,CAAAC,MAAA;UACAL,KAAA,CAAAM,kBAAA;QACA;MACA,CACA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;IACAC,sBAAA,WAAAA,uBAAAC,EAAA,EAAAC,IAAA;MAAA,IAAAC,MAAA;MACAvC,kBAAA,CAAAwC,YAAA,CAAAH,EAAA,EAAAC,IAAA,EAAAR,IAAA,WAAAC,QAAA;QACAQ,MAAA,CAAAE,SAAA,GAAAV,QAAA,CAAA1B,IAAA;MACA;MACA;MACA;IACA;IACA4B,kBAAA,WAAAA,mBAAA;MAAA,IAAAS,MAAA;MAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OACAT,MAAA,CAAAd,MAAA,CAAAwB,MAAA,CACA,4BACApD,kBAAA,CAAAqD,yBAAA,CAAAX,MAAA,CAAAd,MAAA,CAAAC,KAAA,CAAAtB,SAAA,CACA;YAAA;YAAA;cAAA,OAAA0C,QAAA,CAAAK,IAAA;UAAA;QAAA,GAAAR,OAAA;MAAA;IACA;IACAS,YAAA,WAAAA,aAAA;MAAA,IAAAC,MAAA;MACA,KAAAlD,WAAA,CAAAE,QAAA,QAAAiD,SAAA,CAAAjD,QAAA;MACAkD,OAAA,CAAAC,GAAA,YAAAF,SAAA,CAAAjD,QAAA;MACAN,iBAAA,CAAAsC,YAAA,CACA,KAAAlC,WAAA,CAAAE,QAAA,EACA,KAAAF,WAAA,CAAAK,eACA,EAAAmB,IAAA,WAAAC,QAAA;QACAyB,MAAA,CAAA3C,SAAA,GAAAkB,QAAA,CAAA1B,IAAA;MACA;IACA;EACA;EACAuD,OAAA,WAAAA,QAAA;IAAA,IAAAC,MAAA;IAEA7D,kBAAA,CAAAwC,YAAA,MAAAlC,WAAA,CAAAE,QAAA,OAAAF,WAAA,CAAAK,eAAA,EAAAmB,IAAA,WAAAC,QAAA;MACA8B,MAAA,CAAApB,SAAA,GAAAV,QAAA,CAAA1B,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}